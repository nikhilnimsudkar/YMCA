package com.serene.job.scheduler;

import javax.annotation.PostConstruct;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.util.Assert;

public class GenericFileToSCJobScheduler extends AbstractJobScheduler implements InitializingBean {

	private Logger log = LoggerFactory.getLogger(GenericSCToDbJobScheduler.class);
	
	@PostConstruct
	public void loadJob() {
		ItemReader fileItemReader =  (ItemReader) applicationContext.getBean("fileItemReader");

		fusionItemWriter.setOperation("Merge");
		
		Step step = stepBuilderFactory.get("step")
		.chunk(jobSchedulerMetadata.getCommitSize())
		.reader((ItemReader) fileItemReader)
		.writer((ItemWriter) fusionItemWriter)
		.listener(itemListener)
		.build();
		
		job = jobBuilderFactory.get(jobSchedulerMetadata.getJobName())
        .incrementer(new RunIdIncrementer())
        .flow(step)
        .end()
        .build();
	}
	
	@Override
	public void run() {
		try {
			JobParametersBuilder parametersBuilder = new JobParametersBuilder();
			parametersBuilder.addLong("time",System.currentTimeMillis());
			parametersBuilder.addString("objectName",jobSchedulerMetadata.getToObjectName());
			parametersBuilder.addString("objectIdField",jobSchedulerMetadata.getToObjectIdField());
			JobExecution execution = jobLauncher.run(job, parametersBuilder.toJobParameters());
			log.info("Exit Status : " + execution.getStatus());
		} catch (Exception e) {
			log.error("Error while running the job " + jobSchedulerMetadata.getJobName(), e);
		}
	}

	@Override
	public void afterPropertiesSet() throws Exception {
		//Assert.notNull(jobSchedulerMetadata.getJobName(), "A job name is required");
		//Assert.notNull(jobSchedulerMetadata.getFromObjectName(), "A scObjectName is required");
	}
}