package com.serene.job.writer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.jxpath.JXPathContext;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.namedparam.EmptySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterUtils;
import org.springframework.jdbc.core.namedparam.ParsedSql;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

public class CustomJdbcItemWriter<T> extends JdbcBatchItemWriter<T> {

	private String sql ;
	
	private Map<String,String> fieldMapping = new HashMap<String,String>() ;
	
	@Override
	public void write(final List<? extends T> items) throws Exception {
		List<Map<String,String>> values = new ArrayList<Map<String, String>>();
		JXPathContext context = JXPathContext.newContext(items);
		context.setLenient(true);
		for (int i = 0 ; i < items.size() ; i++) {
			Map<String,String> item = (Map<String, String>) items.get(i);
			Map<String,String> value = new HashMap<String,String>();
			ParsedSql parsedSql  = NamedParameterUtils.parseSqlStatement(sql);
			SqlParameterSource paramSource = new EmptySqlParameterSource();
			List<SqlParameter>  sqlParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource);
			for (SqlParameter param : sqlParameters) {
				if (fieldMapping.containsKey(param.getName())){
					String paramValue = (String) context.getValue(fieldMapping.get(param.getName()));
					value.put(param.getName(),paramValue);
				} else {
					value.put(param.getName(),item.get(param.getName()));
				}
			}
			values.add(value);
		}
		super.write((List<? extends T>) values);
	}

	public void setSql(String sql) {
		this.sql = sql;
		super.setSql(sql);
	}

	public void setFieldMapping(Map<String, String> fieldMapping) {
		this.fieldMapping = fieldMapping;
	}
}
