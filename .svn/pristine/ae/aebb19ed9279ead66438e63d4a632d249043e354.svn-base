package com.ymca.web.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ymca.dao.AccountDao;
import com.ymca.dao.PaymentMethodDao;
import com.ymca.model.Account;
import com.ymca.model.PaymentMethod;
import com.ymca.model.User;

@Controller
public class PaymentController extends BaseController {
	
	@Resource
	private AccountDao accountDao;
	
	@Resource
	private PaymentMethodDao paymentMethodDao;
	
	@RequestMapping(value="/viewPaymentHistory", method=RequestMethod.GET)
    public String viewPaymentHistory(final HttpServletRequest request, final HttpServletResponse response) { 
        return "viewPaymentHistory";
    }
	
	@RequestMapping(value="/viewPaymentInformation", method=RequestMethod.GET)
    public ModelAndView viewPaymentInformation(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			model.addAttribute("errMsg", "Your session is expired");
			return new ModelAndView("viewPaymentInformation", model.asMap());
		}
		
		Account account = null;
    	User user =  null;	    	
    	List<PaymentMethod> paymentList = null;
    	if(userId != null && !"".equals(userId)){
	    	account = accountDao.getByEmail(userId);
			request.setAttribute("userId", userId);				
			user = getUserByAccount(account, user);
			paymentList = paymentMethodDao.getPaymentByAccountId(account.getAccountId());
    	}
    	
    	if(account != null){	    		    	    	
	        model.addAttribute("accInfo", account);
	        model.addAttribute("usInfo", user);	
	        int userCount = account.getUser().size();
	        List<User> userS = new ArrayList<User>();
	        int countmembers = 0;
	        if(userCount>1){
		        for(User u: account.getUser()){
		        	if(!user.getUsername().equalsIgnoreCase(u.getUsername()) && u.isActive()){
		        		countmembers = countmembers + 1;
		        		userS.add(u);
		        	}
		        }
			}
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("userS", userS);
	        if(paymentList != null && !paymentList.isEmpty()){
	        	model.addAttribute("paymentInfo" , paymentList.get(0));
	        }
	        
    	}else {
			model.addAttribute("errMsg", "Please Login");
			return new ModelAndView("login", model.asMap());			
		}	        
	        
		return new ModelAndView("viewPaymentInformation", model.asMap());
    }
	
	@RequestMapping(value="/updateCardInfo", method=RequestMethod.GET)
    public @ResponseBody String updateCardInfo(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
        try {            
            model.addAttribute("paymentMethod", new PaymentMethod());
            return "SUCCESS";
        } catch (Exception se) {
            System.out.println("Error occoured");
            se.printStackTrace();
        }
       return null;
    }
	
	@RequestMapping(value="/updateCardInfo", method=RequestMethod.POST)
    public @ResponseBody String updateCardInfoSubmit(PaymentMethod paymentMethod, final HttpServletRequest request, final HttpServletResponse response) {		
        try {            
			List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentByAccountId(paymentMethod.getAccountId());
			PaymentMethod payMethod =  null;
			if(lstPaymentMethod != null && !lstPaymentMethod.isEmpty() ){
				payMethod = lstPaymentMethod.get(0);
				payMethod.setBillingAddressLine1(paymentMethod.getBillingAddressLine1());
				payMethod.setBillingAddressLine2(paymentMethod.getBillingAddressLine2());
				payMethod.setBillingCity(paymentMethod.getBillingCity());
				payMethod.setBillingState(paymentMethod.getBillingState());
				
				payMethod.setFullName(paymentMethod.getFullName());
				payMethod.setCardNumber(paymentMethod.getCardNumber());
				payMethod.setExpirationMonth(paymentMethod.getExpirationMonth());
				payMethod.setExpirationYear(paymentMethod.getExpirationYear());
				payMethod.setSecurityCode(paymentMethod.getSecurityCode());
				paymentMethodDao.save(payMethod);
				return "SUCCESS";	
			}else{
				return "NOT_FOUND";	
			}
			           
        } catch (Exception se) {
            System.out.println("Error occoured");
            se.printStackTrace();
            return "FAIL";
        }       
    }
	
	@RequestMapping(value="/updateBankInfo", method=RequestMethod.GET)
    public @ResponseBody String updateBankInfo(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
        try {            
            model.addAttribute("paymentMethod", new PaymentMethod());
            return "SUCCESS";
        } catch (Exception se) {
            System.out.println("Error occoured");
            se.printStackTrace();
        }
       return null;
    }
	
	@RequestMapping(value="/updateBankInfo", method=RequestMethod.POST)
    public @ResponseBody String updateBankInfoSubmit(PaymentMethod paymentMethod, final HttpServletRequest request, final HttpServletResponse response) {		
        try {            
			List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentByAccountId(paymentMethod.getAccountId());
			PaymentMethod payMethod =  null;
			if(lstPaymentMethod != null && !lstPaymentMethod.isEmpty() ){
				payMethod = lstPaymentMethod.get(0);
				payMethod.setBillingAddressLine1(paymentMethod.getBillingAddressLine1());
				payMethod.setBillingAddressLine2(paymentMethod.getBillingAddressLine2());
				payMethod.setBillingCity(paymentMethod.getBillingCity());
				payMethod.setBillingState(paymentMethod.getBillingState());
				
				payMethod.setBankRoutingNumber(paymentMethod.getBankRoutingNumber());
				payMethod.setCheckingAccountNumber(paymentMethod.getCheckingAccountNumber());
				payMethod.setDriversLicenseNumber(paymentMethod.getDriversLicenseNumber());
				payMethod.setStateOfDL(paymentMethod.getStateOfDL());
				payMethod.setPhoneNumber(paymentMethod.getPhoneNumber());
				payMethod.setTokenNumber(paymentMethod.getTokenNumber());
				
				paymentMethodDao.save(payMethod);
				return "SUCCESS";	
			}else{
				return "NOT_FOUND";	
			}
			           
        } catch (Exception se) {
            System.out.println("Error occoured");
            se.printStackTrace();
            return "FAIL";
        }       
    }
}
