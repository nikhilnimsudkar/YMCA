package com.ymca.web.controller;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ymca.dao.AccountContactDao;
import com.ymca.dao.AccountDao;
import com.ymca.dao.ActivityDao;
import com.ymca.dao.DonationDao;
import com.ymca.dao.PaymentDao;
import com.ymca.dao.PaymentMethodDao;
import com.ymca.dao.SignupDao;
import com.ymca.dao.SystemPropertyDao;
import com.ymca.dao.UserDao;
import com.ymca.model.Account;
import com.ymca.model.AccountContact;
import com.ymca.model.Activity;
import com.ymca.model.Donation;
import com.ymca.model.Invoice;
import com.ymca.model.ItemDetail;
import com.ymca.model.JetPayPayment;
import com.ymca.model.Payer;
import com.ymca.model.Payment;
import com.ymca.model.PaymentMethod;
import com.ymca.model.Signup;
import com.ymca.model.SystemProperty;
import com.ymca.model.User;
import com.ymca.web.enums.PaymentTypeEnum;
import com.ymca.web.enums.ProductTypeEnum;
import com.ymca.web.enums.SignupStatusEnum;
import com.ymca.web.model.ResponseObject;
import com.ymca.web.service.PaymentService;
import com.ymca.web.util.Constants;

@Controller
//@RequestMapping("/donate*")
public class DonationController extends BaseController{
	
	@Resource
	private DonationDao donationDao;
	
	//@Resource
	//private ProgramDao programDao;
	
	@Resource
	private AccountDao accountDao;
	
	@Resource
	private AccountContactDao accountContactDao;
	
	@Resource
	private PaymentMethodDao paymentMethodDao;
	
	@Resource
	private SystemPropertyDao systemPropertyDao;
	
	@Resource
	private UserDao userDao;
	
	@Resource 
	private SignupDao signupDao;
	
	@Resource
	private PaymentService paymentService;
	
	@Resource
	private ActivityDao activityDao;
	
	@Resource
	private PaymentDao paymentDao;
	  
    @RequestMapping(value="/donation/createDonation",method = RequestMethod.GET)
    public ModelAndView createDonation(final HttpServletRequest request, final HttpServletResponse response)
            throws Exception {	  	
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = ((UserDetails) a.getPrincipal()).getUsername();
		Model model = new ExtendedModelMap();
		Account account = null;
		User user = new User();	
		if (userId != null && !"".equals(userId)) {
			account = accountDao.getByEmail(userId);	
			user = getUserByAccount(account,user);			
			model.addAttribute("usInfo", user);
			model.addAttribute("donationInfo", new Donation()); 
		} else {
			model.addAttribute("errMsg",com.ymca.web.util.Constants.NO_RECORDS_FOUND);
		}
		return new ModelAndView("donationForm", model.asMap());
	}
	
	   
    @RequestMapping(value="/donation/createDonation",method = RequestMethod.POST)
    public @ResponseBody String createDonationSubmit(Donation donation, final HttpServletRequest request, final HttpServletResponse response)
            throws Exception {	 
		try{
			Authentication a = SecurityContextHolder.getContext().getAuthentication();
			String userId = ((UserDetails) a.getPrincipal()).getUsername();			
			Account account = null;
			User user = new User();	
			if (userId != null && !"".equals(userId)) {
				account = accountDao.getByEmail(userId);	
				user = getUserByAccount(account,user);	
				donation.setCustomer(account);
				donation.setContact(user);				
				if(donation.getDonationAmtStr()	!= null && !"".equals(donation.getDonationAmtStr().trim())){
					donation.setDonationAmount(Double.valueOf(donation.getDonationAmtStr()));
				}else{
					donation.setDonationAmount(0D);
				}
				donation.setDonationDate(new Date());
				donationDao.save(donation);
			} else {
				return "NOT_FOUND";
			}
			return "SUCCESS";
		}catch(Exception e){
			//System.out.println("Error occured while Creating Donation record in Database");
			log.error("Error in Create Donation ",e);
			return "FAIL";
		}
		
	}
	   
    @ModelAttribute
    @RequestMapping(value="/create",method = RequestMethod.POST)
    protected ResponseObject createDonation(Donation donation) throws Exception {
    	ResponseObject responseObj = new ResponseObject();
    	//responseObj.setStatus(YMCAConstants.STATUS_SUCCESS);
    	/*if(donation.getAccountId() != null){
    		try{
    		//	donationDao.saveDonationDetails(donation);
    		}catch(Exception e){
    			//responseObj.setStatus(YMCAConstants.STATUS_ERROR);
    		}
    	}*/
    	responseObj.setMessage("Successfully created donation details");
		return responseObj; 
    }
    
    @ModelAttribute
    @RequestMapping(value="/{donationId}",method = RequestMethod.GET)
    protected ResponseObject getDonationById(@PathVariable Long donationId) throws Exception {
    	Donation donation = donationDao.getOne(donationId);
    	ResponseObject responseObject = new ResponseObject();
    	responseObject.setData(donation);
    	return responseObject;
    }
    
    @ModelAttribute
    @RequestMapping(value="/",method = RequestMethod.PUT)
    protected ResponseObject updateDonationDetails(Donation donation) throws Exception {
    	ResponseObject responseObject = new ResponseObject();
    	if(donation.getDonationId() != null){
    		//donationDao.updateDonationDetails(donation);
    	}else{
        	responseObject.setMessage("Invalid donation Id.");
        	
        	
        	//responseObject.setStatus(YMCAConstants.STATUS_ERROR);
    	}
    	responseObject.setMessage("Successfully updated Donation details.");
		return responseObject; 
    }
    
    @ModelAttribute    
    @RequestMapping(value="/getDonationByCustomername/{customerName}",method = RequestMethod.GET)
    protected ModelAndView getDonationByCustomername(@PathVariable String customerName,@ModelAttribute("Donation")Donation donation) throws Exception {
    	//ResponseObject responseObject = new ResponseObject();
    	List<Donation> donationList = null;
    	if(customerName != null){
    		//donationList = getDonationService().getDonationByCustomername(customerName);
    		donationList=donationDao.getByCustomerName(customerName);
    	}
    	//responseObject.setData(donationList);
    	//return responseObject;
    	ModelAndView mav = new ModelAndView("read", "donationList",
    			donationList);
		return mav;
    }
    
    
    
    @ModelAttribute
    @RequestMapping(value="/getDonationByAccountId/{accountId}",method = RequestMethod.GET)
	public ResponseObject getDonationByAccountId(@PathVariable String accountId) throws Exception {
    	ResponseObject responseObject = new ResponseObject();
		List<Donation> donationList = null;
		if(accountId != null){
			//donationList = getDonationService().getDonationByAccountId(Long.valueOf(accountId));
			
		}
		responseObject.setData(donationList);
		return responseObject;
	} 
    
    @ModelAttribute    
    @RequestMapping(value="/getDonation",method = RequestMethod.GET)
    protected ModelAndView getDonationList(@ModelAttribute("Donation")Donation donation) throws Exception {
    	//ResponseObject responseObject = new ResponseObject();
    	List<Donation> donationList = null;
    	//if(customerName != null){
    		//donationList = getDonationService().getDonationByCustomername(customerName);
    		donationList=donationDao.findAll();
    				//}
    	//responseObject.setData(donationList);
    	//return responseObject;
    	ModelAndView mav = new ModelAndView("read", "donationList",donationList );
		return mav;
    }
    
    //@ModelAttribute    
    //@RequestMapping(value="/getProgram",method = RequestMethod.POST, final HttpServletRequest request, final HttpServletResponse response)
    //protected ModelAndView getProgramList(@ModelAttribute("Program")Program program) throws Exception {
/*    @ModelAttribute   
    @RequestMapping(value="/getProgram",method = RequestMethod.POST)
    public ModelAndView getProgramList(@ModelAttribute("Program")Program program, final HttpServletRequest request, final HttpServletResponse response)
            throws Exception {	
    	Account account = accountDao.getByEmail(request.getParameter("Username"));
		User user =  null;
		Model model = new ExtendedModelMap();
		if(account !=null && account.getUser() != null){
			for (Iterator<User> it = account.getUser().iterator(); it.hasNext(); ) {
	    		user = it.next();
					        
		    }
			if(user != null && user.getUsername() !=null && user.getPassword() != null){
				if(user.getPassword().equals(request.getParameter("Password"))){	    	
			    	//ResponseObject responseObject = new ResponseObject();
			    	List<Program> programList = null;
			    	//if(customerName != null){
			    		//donationList = getDonationService().getDonationByCustomername(customerName);
			    	programList=programDao.findAll();
			    	
			    	List<Donation> donationList = null;
			    	//if(customerName != null){
			    		//donationList = getDonationService().getDonationByCustomername(customerName);
			    		donationList=donationDao.findAll();
			    	
			    	//ModelAndView mav = new ModelAndView("customer_home", "programList",programList );
			    	
			        try {
			            model.addAttribute("programList", programList);
			            model.addAttribute("donationList", donationList);
			            
			            HttpSession session = request.getSession();			            
			            session.setAttribute("accountInfo", account);
			            session.setAttribute("userInfo", user);
			            
			            //request.setAttribute("accountInfo", account);
			            //request.setAttribute("userInfo", user);
			        } catch (Exception se) {
			            //System.out.println("Error occoured while querying Product");
			            log.error("Error  ",e);
			        }
			        return new ModelAndView("customer_home", model.asMap());
				}else{
					model.addAttribute("errMsg", "Please enter the correct Email or password");
					return new ModelAndView("login", model.asMap());
				}
			}
		}
		//return mav;
		return null;
    }   */
    
    @ModelAttribute
    @RequestMapping(value="donationHome",method = RequestMethod.GET)
    protected ModelAndView donationHome() throws Exception {  
    	Model model = new ExtendedModelMap();
    	String userId = null;                 
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        userId = auth.getName();
        Account account =  null;
        //List<Signup> donationLst = new ArrayList<Signup>();
        List<Payment> paymentLst = new ArrayList<Payment>();
        if(userId != null && !"anonymousUser".equals(userId)){
			account = accountDao.getByEmail(userId);
			//donationLst =  signupDao.getByCustomerIdAndTypeDonation(account.getAccountId());				
			//paymentLst = paymentDao.getByCustomerIdAndTypeDonation(account.getAccountId());
			List<Payment> donationLst = paymentDao.getByCustomerIdAndTypeDonation(account.getAccountId());		
			List<Activity> activityLst =  activityDao.getByCustomerIdAndTypeDonation(account.getAccountId());
			Map<Long, Activity> activityMap = new HashMap<Long, Activity>();			
			for(Activity activity : activityLst){
				activityMap.put(activity.getSignup().getSignupId(), activity);
			}
			if(activityLst != null && !activityLst.isEmpty()){
				for(Payment payment : donationLst){					
					if(payment !=  null && payment.getSignup() != null && payment.getSignup().getSignupId() != null){
						if(!activityMap.containsKey(payment.getSignup().getSignupId()) && !paymentLst.contains(payment)){
							paymentLst.add(payment);
						}
					}					
				}
			}else{
				paymentLst.addAll(donationLst);
			}
			
			model.addAttribute("donationList", paymentLst);
        }
    	return new ModelAndView("donationHome", model.asMap());
    }
    
    @RequestMapping(value="donationDonate",method = RequestMethod.GET)
    public ModelAndView registerAndDonate(final HttpServletRequest request, final HttpServletResponse response)
            throws Exception {	  	
    	String userId = null;                 
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        userId = auth.getName();
		Model model = new ExtendedModelMap();
		Account account = null;
		User user = new User();
		List<PaymentMethod> paymentMethodList = null;
		
		if(userId != null && !"anonymousUser".equals(userId)){
			account = accountDao.getByEmail(userId);	
			user = getUserByAccount(account,user);			
			model.addAttribute("usInfo", user);
			model.addAttribute("donationInfo", new Donation()); 
			
			List<User> userLst =  new ArrayList<User>();
			List<AccountContact> accountContactLst =  accountContactDao.getByCustomer(account);
			for(AccountContact ac : accountContactLst){
				if(ac.getEndDate() == null && isAdultByDob(ac.getContact().getDateOfBirth())){
					userLst.add(ac.getContact());
				}				
			}
			model.addAttribute("contactLst", userLst);
			paymentMethodList = paymentMethodDao.getPaymentMethodListForAccountID(account.getAccountId());
	        model.addAttribute("paymentInfoLst" , paymentMethodList);
			
			List<PaymentMethod> creditCardPaymentMethodLst = paymentMethodDao.getCreditCardInfoByAccountId(account.getAccountId());
			List<PaymentMethod> achPaymentMethodLst = paymentMethodDao.getACHInfoByAccountId(account.getAccountId());
			
			model.addAttribute("payMethodLstCredit", creditCardPaymentMethodLst);
			model.addAttribute("payMethodLstACH", achPaymentMethodLst); 
			
		} else {			
			
		}
		model.addAttribute("employerLst", accountDao.getByCustomerType(Constants.ACCOUNT_ORGANIZATION));	
		model.addAttribute("locations", locationDao.findAll());	
		List<ItemDetail> donationTCLst = itemDetailDao.getByTypeAndNeedTC_c(ProductTypeEnum.DONATION.getValue(), "Yes");
		if(donationTCLst != null && !donationTCLst.isEmpty()){
			model.addAttribute("donationTAndC", donationTCLst.get(0));
		}	
		model.addAttribute("signup", new Signup());
		return new ModelAndView("donationForm", model.asMap());
	}
    	   
    @RequestMapping(value="donationDonate",method = RequestMethod.POST)
    public ModelAndView registerAndDonate(Signup signup, final HttpServletRequest request, final HttpServletResponse response)
            throws Exception {	 
		try{
			ItemDetail itemDetail  = null;
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();        
			String userId = auth.getName();	
			Account account = null;
			User user = new User();	
			User savedUser =  new User();
			if(userId != null && !"anonymousUser".equals(userId)){
				account = accountDao.getByEmail(userId);	
				user = getUserByAccount(account,user);	
				signup.setCustomer(account);
				/*if(signup != null && signup.getEmployer() != null){
					signup.setEmployer(signup.getEmployer());
				}	
				if(signup != null && signup.getEmployee() != null){
					signup.setEmployee(signup.getEmployee());
				}*/
				signup.setEmployer(null);
				signup.setEmployee(null);
				
				if(signup != null){					
					if(signup.getEmployee() != null){
						//signup.setEmployee(signup.getEmployee());
					}
					if(StringUtils.isNotBlank(signup.getPaymentFrequency())){
						if(!signup.getPaymentFrequency().equals("0")){
							Calendar endDateCal = Calendar.getInstance();
							endDateCal.add(Calendar.MONTH, Integer.valueOf(signup.getPaymentFrequency()));							
							signup.setProgramEndDate(endDateCal.getTime());
							
							Calendar nextBillingDate = Calendar.getInstance();
							nextBillingDate.add(Calendar.MONTH, 1);
							signup.setMembersshipFeeNextBillingDate(nextBillingDate.getTime());
						}else{
							signup.setProgramEndDate(new Date());
						}
						
					}	
					
					if(signup.getItemDetailId() != null){
						itemDetail = itemDetailDao.getOne(signup.getItemDetailId());
						signup.setItemDetail(itemDetail);
					}
					if(StringUtils.isNotBlank(signup.getRecognizeAs()) && isNumeric(signup.getRecognizeAs())){
						User u = userDao.getOne(Long.valueOf(signup.getRecognizeAs()));
						u.setDoNotEmail(signup.getContact().getDoNotEmail());
						savedUser = userDao.save(u);
						signup.setContact(u);
						signup.setRecognizeAs(u.getFullName());					
					}else{
						user.setDoNotEmail(signup.getContact().getDoNotEmail());
						savedUser = userDao.save(user);
						signup.setContact(user);
					}					
				}
				Calendar cal  =  Calendar.getInstance();
				signup.setSignupDate(cal.getTime());
				signup.setProgramStartDate(cal.getTime());				
				signup.setSetUpFee(0D);
				signup.setDeposit(0D);
				signup.setRegistrationFee(0D);
				signup.setSignupPrice(0D);
				if(StringUtils.isNoneBlank(signup.getFinalAmount())){
					signup.setSignupPrice(Double.valueOf(signup.getFinalAmount()));
					signup.setTotalAmount(signup.getFinalAmount());
				}
				if(StringUtils.isNoneBlank(signup.getSpecialRequest()) && !signup.getSpecialRequest().equals("0") && StringUtils.isNoneBlank(signup.getCampaigner())){
					signup.setSpecialRequest("Apply my gift : " + signup.getSpecialRequest() + ", YMCA campaigner : "+ signup.getCampaigner());									
				}else if(StringUtils.isNoneBlank(signup.getSpecialRequest()) && !signup.getSpecialRequest().equals("0")){
					signup.setSpecialRequest("Apply my gift : " + signup.getSpecialRequest());	
				}else if(StringUtils.isNoneBlank(signup.getCampaigner())){
					signup.setSpecialRequest("YMCA campaigner : "+ signup.getCampaigner());
				}
				//picklist value in FCRM
				signup.setCampaigner(null);				
				signup.setType(ProductTypeEnum.DONATION.getValue());
				signup.setPortalLastModifiedBy(getPortalLastModifiedBy());
				signup.setLastUpdated(Calendar.getInstance());
				signup.setStatus(SignupStatusEnum.ACTIVE.toString());
				Signup dbSignup = signupDao.save(signup);
				dbSignup.setEmployeeSignUp(dbSignup.getSignupId());
				
				Payer payer = null;	            
            	JSONObject amountLst =  new JSONObject();
    			amountLst.put("itemprice", String.valueOf(dbSignup.getFinalAmount()));
    			amountLst.put("itempriceOnSignup", String.valueOf(dbSignup.getFinalAmount()));
    			amountLst.put("isRecurring", "true");    			
    			//payment method remaining
    			payer = paymentService.savepayer(String.valueOf(paymentMethodDao.findAll().get(0).getPaymentId()), account, amountLst, itemDetail, dbSignup, null); 
	    		
    			Invoice invoice = null;
    			Date currentDate =  new Date();    			
    			JSONObject amountLst1 =  new JSONObject();
    			amountLst1.put("itemprice", dbSignup.getFinalAmount());
    			amountLst1.put("fa", "0");  
    			amountLst1.put("itempriceOnInvoiceForRecurring", String.valueOf(dbSignup.getFinalAmount()));
    			amountLst1.put("isRecurring", "true");    
    			
    			if(payer != null && payer.getEnddate() != null && currentDate.before(payer.getEnddate())){
    				invoice = paymentService.saveinvoice(account, amountLst1, savedUser, dbSignup, payer);
    			}else if(payer.getEnddate() == null){
    				invoice = paymentService.saveinvoice(account, amountLst1, savedUser, dbSignup, payer);
    			}
    			//JetPayPayment jetpay = paymentService.savepayment(paymentMethod.getPaymentId().toString(), "", account.getTransId(), acc,  savedUserLst.get(0), savedSignupList.get(0),payer,invoice);
    			Activity activity = activityDao.save(getActivityData(account, savedUser, dbSignup, com.ymca.web.util.Constants.NEW_DONATION_REQUEST));
    			String paymentMode = "Cash";
    			if(StringUtils.isNotBlank(paymentMode)){
    				JetPayPayment jetpay = paymentService.savepayment("0", "0", "0", account, savedUser, dbSignup, payer, invoice, paymentMode);				
    			}
    			
			} else {
				return new ModelAndView("donationError");
			}
			return new ModelAndView("donationSuccess");
		}catch(Exception e){
			//System.out.println("Error occured while Creating Donation record in Database");
			log.error("Error in Create Donation ",e);
			return new ModelAndView("donationError");
		}
		
	}

    private Activity getActivityData(Account account, User contact, Signup signup, String donationDesc) {	
		Activity activity = new Activity();
		if(account!=null && contact!=null){	
			activity.setType(ProductTypeEnum.DONATION.getValue());
			activity.setDescription(donationDesc);
			// get current time stamp
			java.util.Date date= new java.util.Date();
	 		activity.setCreatedDate(new Timestamp(date.getTime()));
	 		activity.setCustomer(account);
	 		activity.setContact(contact);
	 		activity.setSignup(signup);
	 		activity.setShowOnPortal(true);	  	
	 		Calendar cal = Calendar.getInstance();
	 		List<ItemDetail> donationTCLst = itemDetailDao.getByTypeAndNeedTC_c(ProductTypeEnum.DONATION.getValue(), "Yes");
			if(donationTCLst != null && !donationTCLst.isEmpty()){
				activity.setAssignTo(donationTCLst.get(0).getDonationManager());
			}
	 		activity.setLastUpdated(cal);
    	}
		return activity;
	}

	public boolean isAdultByDob(Date dobDate){	
		boolean isAdult = false;
		Calendar dob = Calendar.getInstance();  
		dob.setTime(dobDate);  
		Calendar today = Calendar.getInstance();  
		int age = today.get(Calendar.YEAR) - dob.get(Calendar.YEAR);  
		if (today.get(Calendar.MONTH) < dob.get(Calendar.MONTH)) {
		  age--;  
		} else if (today.get(Calendar.MONTH) == dob.get(Calendar.MONTH)
		    && today.get(Calendar.DAY_OF_MONTH) < dob.get(Calendar.DAY_OF_MONTH)) {
		  age--;  
		}		
		
		int adultAgeLowerLimit = 18;		
		List<SystemProperty> adultAg = new ArrayList<SystemProperty>();			
		adultAg = systemPropertyDao.getPropertyByKeyName(Constants.MEMBERSHIP_ADULT_AGE_VALIDATION_LOWER_LIMIT);
		if(adultAg != null && !adultAg.isEmpty()){
			adultAgeLowerLimit = Integer.parseInt(adultAg.get(0).getKeyValue());				
		}

		//if(age > adultAgeLowerLimit && age < adultAgeUpperLimit){
		if(age > adultAgeLowerLimit){
			isAdult = true;
		}
		
		return isAdult;
	}
    
	public static boolean isNumeric(String str) {
		try {
			double d = Double.parseDouble(str);
		} catch (NumberFormatException nfe) {
			return false;
		}
		return true;
	}
	
	 @RequestMapping(value="cancelDonation",method = RequestMethod.POST)
	    public @ResponseBody String cancelDonation(@RequestParam(value="donationId") String donationId, final HttpServletRequest request, final HttpServletResponse response)
	            throws Exception {	  	
	    	String userId = null;                 
	        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	        userId = auth.getName();			
			Account account = null;
			User user = new User();		
			Signup donationSignup =  null;
			
			if(userId != null && !"anonymousUser".equals(userId)){
				account = accountDao.getByEmail(userId);	
				user = getUserByAccount(account,user);			
				donationSignup = signupDao.getOne(Long.valueOf(donationId));
				Activity activity = getActivityData(account, user, donationSignup, com.ymca.web.util.Constants.CANCEL_DONATION_REQUEST);				
				activityDao.save(activity);
				return "SUCCESS";
			} else {			
				return "FAIL";
			}	
		}
}
