/**
 * @author gpatwa
 * Custom Item reader for the fusion web service
 *  
 */
package com.serene.job.reader;

import java.util.AbstractList;
import java.util.AbstractMap;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

import org.apache.commons.lang3.StringUtils;
import org.springframework.batch.item.ItemReader;

import com.serene.job.common.BaseService;
import com.serene.ws.exception.FQLException;
import com.serene.ws.exception.WebServiceException;

public class FusionItemReader extends BaseService implements ItemReader<Map<String,Object>>  {

	private String fql ; 
	private Integer limit = 12;
	private Integer offset = 0 ;
	
	private Queue<Map<String,Object>> items = new LinkedBlockingQueue<Map<String,Object>>();
	
	@Override
	public Map<String,Object> read() throws Exception {
		if (items.isEmpty()) {
			validateInput();
			fetchData();
		}
		return items.poll();
	}

	private void validateInput() throws Exception {
		if (StringUtils.isBlank(fql)) {
			throw new Exception(" Fql cannot be blank");
		}
	}

	private void fetchData() throws WebServiceException, FQLException {
		String appendPaging = " limit  " + limit + " offset " +  offset ;
		Map<String, Object> newItems =  fusionWebService.query(fql + appendPaging);
		if (!newItems.isEmpty()) {
			Object response =  newItems.get("result");
			if (response instanceof AbstractMap) {
				Object data = ((Map<String, Object>) response).get("Value");
				if (data == null) {
					items.add((Map<String, Object>) response);
				} else if (data instanceof AbstractMap) {
					items.add((Map<String, Object>) data);
				} else if (((Map<String, Object>) response).get("Value")  instanceof AbstractList){
					List<Map<String,Object>> payload = (List<Map<String,Object>> )data;
					for (Map<String, Object> map : payload) {
						items.add(map);
					}
				}
			} else if (response  instanceof AbstractList){
				List<Map<String,Object>> payload = (List<Map<String,Object>> )response;
				for (Map<String, Object> map : payload) {
					items.add(map);
				}
			}
		}
		offset = offset+ limit;
	}

	public void setFql(String fql) {
		this.fql = fql;
	}

	public void setLimit(Integer limit) {
		this.limit = limit;
	}
}