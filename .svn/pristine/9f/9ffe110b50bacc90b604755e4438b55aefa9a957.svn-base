package com.ymca.web.controller;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ymca.dao.AccountDao;
import com.ymca.dao.ItemDetailsSessionDao;
import com.ymca.dao.LocationDao;
import com.ymca.dao.PaymentMethodDao;
import com.ymca.dao.ProductDao;
import com.ymca.dao.SignupDao;
import com.ymca.model.Account;
import com.ymca.model.ItemDetails;
import com.ymca.model.ItemDetailsSession;
import com.ymca.model.Locations;
import com.ymca.model.PaymentMethod;
import com.ymca.model.Product;
import com.ymca.model.Signup;
import com.ymca.model.User;
import com.ymca.web.util.Constants;

@Controller
public class ProgramController extends BaseController {
	
	@Resource
	private AccountDao accountDao;
	
	@Resource
	private ProductDao productDao;
	
	@Resource
	private LocationDao locationDao;
	
	@Resource
	private SignupDao signupDao;
	
	@Resource
	private PaymentMethodDao paymentMethodDao;
	
	@Resource
	private ItemDetailsSessionDao itemDetailsSessionDao;
	
	@RequestMapping(value="/programRegistration", method=RequestMethod.GET)
    public ModelAndView programRegistration(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			model.addAttribute("errMsg", "Your session is expired");
			return new ModelAndView("login", model.asMap());
		}
		
		Account account = null;
    	User user =  null;	
    	List<PaymentMethod> paymentList = null;
    	if(userId != null && !"".equals(userId)){
	    	account = accountDao.getByEmail(userId);
			request.setAttribute("userId", userId);				
			user = getUserByAccount(account, user);
			paymentList = account.getPaymentMethod();
    	}
    	
    	if(account != null){	    		    	    	
	        model.addAttribute("accInfo", account);
	        model.addAttribute("usInfo", user);	
	        
	        int userCount = account.getUser().size();
	        List<User> userS = new ArrayList<User>();
	        int countmembers = 0;
	        if(userCount>1){
		        for(User u: account.getUser()){
		        	if(!user.getUsername().equalsIgnoreCase(u.getUsername()) && u.isActive()){
		        		countmembers = countmembers + 1;
		        		userS.add(u);
		        	}
		        }
			}
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("userS", userS);
	        model.addAttribute("AlluserS", account.getUser());
	        model.addAttribute("productcategories", productDao.getProductCategories());
	        model.addAttribute("locations", locationDao.findAll());
	        model.addAttribute("paymentInfoLst" , paymentList);	     
	        
    	}else {
			model.addAttribute("errMsg", "Please Login");
			return new ModelAndView("login", model.asMap());
			
		}		
		return new ModelAndView("programRegistration", model.asMap());
    }
	
	@RequestMapping(value="/getItemSessionDetails", method=RequestMethod.GET)
    public @ResponseBody List<ItemDetailsSession>  getItemSessionDetails(@RequestParam String location, @RequestParam String category, @RequestParam String productname, final HttpServletRequest request, final HttpServletResponse response) { 	
		
		List<ItemDetailsSession> nullitems = new ArrayList<ItemDetailsSession>();
		DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
		DateFormat inputsdf = new SimpleDateFormat("M/d/yyyy");  
		DateFormat inputmonthsdf = new SimpleDateFormat("MMM yyyy");  
		//String locationId = request.getParameter("location");
		//String category = request.getParameter("category");
		//String productname = request.getParameter("productname");
		String dayview = request.getParameter("dayview");
		String dateormonth = request.getParameter("dateormonth");
		
		Locations locations = new Locations();
		Long locId = Long.parseLong(location);
		locations.setLocationId(locId);
		
		Date startDate;
        Date endDate;
        
		if(dayview.equalsIgnoreCase("MONTH")){
			Calendar c = Calendar.getInstance();
			try {
				c.setTime(inputmonthsdf.parse(dateormonth));
				
			} catch (ParseException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return nullitems;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return nullitems;
			}
			
			   // this takes current date
			
		    c.set(Calendar.DAY_OF_MONTH, 1);
		    Date firstDateofMonth = c.getTime(); 
		    
		    //Date today = new Date();  
	        //Calendar calendar = Calendar.getInstance();  
	        //calendar.setTime(today);  
	
	        c.add(Calendar.MONTH, 1);  
	        //c.set(Calendar.DAY_OF_MONTH, 1);  
	        c.add(Calendar.DATE, -1);  
	        Date lastDateOfMonth = c.getTime(); 
        
			try {
				startDate = sdf.parse(sdf.format(firstDateofMonth));
				endDate = sdf.parse(sdf.format(lastDateOfMonth));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return nullitems;
			}
		}
		else{
			try {
				if("".equals(dateormonth.trim())){
					dateormonth = inputsdf.format(new Date());
				}
				startDate = sdf.parse(sdf.format(inputsdf.parse(dateormonth)));
				
				Calendar cal = Calendar.getInstance();
				cal.setTime(inputsdf.parse(dateormonth));
				cal.add(Calendar.MONTH, 1);  
		        cal.set(Calendar.DAY_OF_MONTH, 1);  
		        cal.add(Calendar.DATE, -1);  
		        Date lastDateOfMonth = cal.getTime(); 
		        
		        endDate = sdf.parse(sdf.format(lastDateOfMonth));
				//endDate = sdf.parse(sdf.format(inputsdf.parse(dateormonth)));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return nullitems;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return nullitems;
			}
			
		}
		
		try {
			List<ItemDetailsSession> itemDetailsSession = productDao.getMembershipProgramSession(startDate,endDate,category,productname,locations);
			System.out.println(itemDetailsSession.size());
			if(itemDetailsSession.size()==0){
				return nullitems;
			}
			return itemDetailsSession;
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			//e1.printStackTrace();
			return nullitems;
		}
		
	}
	
	@RequestMapping(value="/signupProgram", method=RequestMethod.POST)
    public @ResponseBody String  signupProgram(ItemDetailsSession itemDetailsSession, final HttpServletRequest request, final HttpServletResponse response) { 	
		//for(ItemDetailsSession ids: itemDetailsSession){
			//System.out.println(itemDetailsSession.getItemDetailsSessionId());
		//}
		String location = request.getParameter("location");
		String paymentId = request.getParameter("paymentId");
		String lstSessionId = request.getParameter("selectedItemSession");
		List<String> lstStrSessionId = Arrays.asList(lstSessionId.split(","));
		
		List<User> lstSelectedContact =  new ArrayList<User>();
		
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			return null;
		}
		
		Account customer = null;
    	if(userId != null && !"".equals(userId)){
    		customer = accountDao.getByEmail(userId);			
    	}
    	
    	
    	if(customer!=null && customer.getUser() !=null){
    		for(User c: customer.getUser()){
    			String user = request.getParameter("user_"+c.getId());
    			if(user!= null && c.getId().equals(Long.parseLong(user))){
    				lstSelectedContact.add(c);
    			}
    		}
    	}
    	
    	if(lstSelectedContact.size()>0){
    		for(String sId: lstStrSessionId){
				ItemDetailsSession ids =  itemDetailsSessionDao.getByItemDetailsSessionId(Long.parseLong(sId));
			
    			for(User u: lstSelectedContact){
    				if(u!=null){
    					Signup signup = new Signup();
    		    		signup.setCustomer(customer);
    		    		signup.setItemDetailsSession(ids);
    		    		signup.setItem(ids.getItem());
    		    		signup.setProgramStartDate(ids.getItemDetails().getStartdate());
    		    		signup.setProgramEndDate(ids.getItemDetails().getEnddate());
    		    		signup.setFinalAmount(String.valueOf(ids.getItemDetails().getPrice()));
    		    		signup.setLocation(location);
    					signup.setContact(u);
    					signup.setStatus(Constants.ACTIVE);
    					signup.setType("MEMBERSHIP");
    					
    					List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentMethodByPaymentId(Long.parseLong(paymentId));
    					PaymentMethod paymentMethod = lstPaymentMethod.get(0);
    					signup.setPaymentMethod(paymentMethod);
    					signupDao.save(signup);
    				}
    			}
	    	}
		}
		
		return null;
	}
	
	@RequestMapping(value="/getcartItems", method=RequestMethod.POST)
    public @ResponseBody List<ItemDetailsSession>  getcartItems(ItemDetailsSession itemDetailsSession, final HttpServletRequest request, final HttpServletResponse response) { 	
		
		String lstSessionId = request.getParameter("selectedItemSession");
		List<String> lstStrSessionId = Arrays.asList(lstSessionId.split(","));
		List<ItemDetailsSession> lstidsOut = new ArrayList<ItemDetailsSession>();
		
		for(String sId: lstStrSessionId){
			ItemDetails itemDetails = new ItemDetails();
			ItemDetailsSession idsOut = new ItemDetailsSession();
			ItemDetailsSession ids =  itemDetailsSessionDao.getByItemDetailsSessionId(Long.parseLong(sId));
			
			Authentication a = SecurityContextHolder.getContext().getAuthentication();
			String userId = null;
			try{
				userId = ((UserDetails) a.getPrincipal()).getUsername();
			}catch(Exception e){
				return null;
			}
			
			Account customer = null;
	    	if(userId != null && !"".equals(userId)){
	    		customer = accountDao.getByEmail(userId);			
	    	}
	    	
	    	
	    	if(customer!=null){
	    		idsOut.setSessionName(ids.getSessionName());
	    		idsOut.setDays(ids.getDays());
	    		idsOut.setStarttime(ids.getStarttime());
	    		idsOut.setEndtime(ids.getEndtime());
	    		
	    		itemDetails.setStartdate(ids.getItemDetails().getStartdate());
	    		itemDetails.setEnddate(ids.getItemDetails().getEnddate());
	    		itemDetails.setPrice(ids.getItemDetails().getPrice());
	    		idsOut.setItemDetails(itemDetails);
	    		
	    		lstidsOut.add(idsOut);
	    		System.out.println(idsOut);
	    	}
		}
		
		return lstidsOut;
	}
	
	@RequestMapping(value="/getProductsbyCategory", method=RequestMethod.GET)
    public @ResponseBody List<Product>  getProductsbyCategory(final HttpServletRequest request, final HttpServletResponse response) { 		
    	try{
    		String strCategory = request.getParameter("category");
    		List<Product> productLst =  productDao.getProductsbyCategories(strCategory);
    		return productLst; 
    		
    	}catch(Exception e){    		
    		      		
    	}
		return null;    	
    }
	
	@RequestMapping(value="/ProgramDetail", method=RequestMethod.GET)
    public String ProgramDetail(final HttpServletRequest request, final HttpServletResponse response) { 
		return "ProgramDetail";
	}
}
