package com.serene.job;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Logger;

import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.lang3.StringUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.explore.JobExplorer;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.JobOperator;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.namedparam.EmptySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterUtils;
import org.springframework.jdbc.core.namedparam.ParsedSql;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = JobBootLoader.class)
public class JobTests {

	private static Logger log = Logger.getLogger(JobTests.class.getName()); 
	
    @Autowired
    private JobLauncher jobLauncher;
	
	@Autowired
	private JobOperator jobOperator;

	@Autowired
	private JobRepository jobRepository;

	
	@Autowired
	private JobExplorer jobExplorer ;
	
	@Test
	public void runScToDbAccount() {
		try {
			log.info("start");
			String jobName = "accountJob8";
			Long jodId = jobOperator.start(jobName,System.currentTimeMillis()+"");
			log.info(jodId.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void runJob2() {
		try {
			log.info("start");
			String jobName = "opptortunityJob";
			String lastPoolTimestamp = "lastPoolTimestamp="+System.currentTimeMillis() + "";
			Long jodId = jobOperator.start(jobName,lastPoolTimestamp);
			log.info(jodId.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void runDbToScAccountJob() {
		try {
			log.info("start");
			String jobName = "dbToScAccount";
			String lastPoolTimestamp = "lastPoolTimestamp="+System.currentTimeMillis() + "";
			Long jodId = jobOperator.start(jobName,lastPoolTimestamp);
			log.info(jodId.toString());
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void runGenericJobScheduler() {
		try {
			while (true) {
				Thread.sleep(1000);
				Set<JobExecution> jobExecutions =  jobExplorer.findRunningJobExecutions("scToDbAccountJob");
				boolean exist = false ;
				for (JobExecution execution : jobExecutions ) {
					if (StringUtils.equalsIgnoreCase(execution.getExitStatus().getExitCode(), "COMPLETED"))
					 exist = true ; 
				}
				if(exist) break ;
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test
	public void testParameterList() {
		String sql ="select e from afa where ada = :NameParamed and avc = 12312 order by asv limit 2";
		ParsedSql parsedSql  = NamedParameterUtils.parseSqlStatement(sql );
		SqlParameterSource paramSource = new EmptySqlParameterSource();
		List<SqlParameter>  ss = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource);
		for(SqlParameter p : ss) {
			System.out.println(p.getName());
		}
	}
	
	@Test
	public void jXpath() {
		Map<String, Object> item = new HashMap<String, Object>(); 
		Map<String, String> child1= new HashMap<String, String>();
		Map<String, String> child2= new HashMap<String, String>();
		
		child1.put("name", "name1");
		child1.put("owner", "true");

		child2.put("name", "name2");
		child2.put("owner", "false");
		
		item.put("p1", "p1");
		List<Map<String, String>> childs = new ArrayList<Map<String,String>>();
		childs.add(child1);
		childs.add(child2);
		item.put("child", childs);
		
		JXPathContext context = JXPathContext.newContext(item);
		System.out.println(context.getValue("p1"));
		System.out.println(context.getValue("/child[owner='false']/name"));
		
	}
}
