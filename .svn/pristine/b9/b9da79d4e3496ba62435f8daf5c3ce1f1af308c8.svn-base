package com.ymca.web.controller;

import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ymca.dao.AccountContactDao;
import com.ymca.dao.AccountDao;
import com.ymca.dao.ActivityDao;
import com.ymca.dao.LocationDao;
import com.ymca.dao.OpportunityDao;
import com.ymca.dao.SignupDao;
import com.ymca.dao.UserDao;
import com.ymca.model.Account;
import com.ymca.model.AccountContact;
import com.ymca.model.Activity;
import com.ymca.model.Address;
import com.ymca.model.ItemDetail;
import com.ymca.model.Opportunity;
import com.ymca.model.Signup;
import com.ymca.model.User;
import com.ymca.web.service.AccountContactService;
import com.ymca.web.service.ContactService;
import com.ymca.web.util.Constants;
import com.ymca.web.util.MemberAge;

@Controller
@Scope("session")
public class YAgentConsoleController extends BaseController  implements Serializable {
	
	@Resource
	private AccountDao accountDao;

	@Resource
	private UserDao userDao;

	@Resource
	private ContactService contactService;

	@Resource
	private UserDetailsService userDetailsService;
	
	@Resource
	private SignupDao signupDao;
	
	@Resource
	private ActivityDao activityDao;
	
	@Resource
	private AccountContactService accountContactService;
	
	@Resource
	private AccountContactDao accountContactDao;
	
	@Resource
	private OpportunityDao opportunityDao; 
	
	@Resource
	private LocationDao locationDao;

	private String agentUid ;
	
	private String sso ;
	
	public String getAgentUid() {
		return agentUid;
	}

	public void setAgentUid(String agentUid) {
		this.agentUid = agentUid;
	}

	public String getSso() {
		return sso;
	}

	public void setSso(String sso) {
		this.sso = sso;
	}

	@Autowired
	 private ServletContext context; 
	
	// @Resource
	// private UserCache userCache ;

	@RequestMapping(value = "/admin/YAgentConsole", method = RequestMethod.GET)
	public String yAgentConsole(String agentUid,String sso,String retUrl) {
		setAgentDetailsInSession(agentUid, sso);
		String url = "YAgentConsole";
		if (StringUtils.isNotBlank(retUrl)) {
			url = retUrl ;
		}
		return url;
	}

	@RequestMapping(value = "/admin/simulate", method = RequestMethod.GET)
	public String simulatePortalUrl(String agentUid,String sso,Long custPartyId,String retUrl,Model model) throws Exception {
		log.info(" agent id " + agentUid + " , sso " + sso);
		Account account = accountDao.findFirst1ByPartyId(custPartyId); 
		if (account == null) throw new Exception("User does not presnet in the portal");
		logoutCurrentUser(agentUid, sso, account.getAccountId());
		loginNewUser(agentUid, sso, account.getAccountId());
		setAgentDetailsInSession(agentUid, sso);
		return "redirect:"+retUrl;
	}

	@RequestMapping(value = "/admin/getUsersBySearchCriteria", method = RequestMethod.GET)
	public @ResponseBody String getUsersBySearchCriteria(String fName,String lName,String eMail,final HttpServletRequest request, final HttpServletResponse response) {
		JSONArray json = new JSONArray();
		try {
			log.info(" agent id " + agentUid + " , sso " + sso);
			
			List<Object[]> customerList = contactService.getAccountDetails(fName, lName, eMail);

			for (Object object : customerList) {
				AccountContact user = (AccountContact) object;
				JSONObject obj = new JSONObject();
				obj.put("customerId", user.getCustomer().getAccountId());
				obj.put("customerName", user.getCustomer().getName());
				obj.put("FirstName", user.getContact().getFirstName());
				obj.put("LastName", user.getContact().getLastName());
				obj.put("EmailAddress", user.getContact().getEmailAddress());
				obj.put("FormattedPhoneNumber", user.getContact().getFormattedPhoneNumber());
				
				if (user.getContact().getDateOfBirth() != null) obj.put("DateOfBirth", user.getContact().getDateOfBirth().toString());
				json.add(obj);
			}
		} catch (Exception se) {
			log.error("Error while fetching the data ",se);
			
		}
		return json.toString();
	}
	

	@RequestMapping(value = "/admin/YAgentConsoleContactSearch", method = RequestMethod.GET)
	public String getAccount(@RequestParam(value = "customerId") Long customerId) {
		log.info(" agent id " + agentUid + " , sso " + sso);
		// logout current user
		String redirectUrl = logoutCurrentUser(agentUid, sso, customerId);
		return redirectUrl;
	}
	
	@RequestMapping(value = "/admin/autologin", method = RequestMethod.GET)
	public String autologin(String agentUid,String sso,Long customerId) throws Exception {
		log.info(" agent id " + agentUid + " , sso " + sso);
		// auto login new user
		String url = loginNewUser(agentUid, sso, customerId);
		return url;
	}

	
	@RequestMapping(value = "/admin/impersonate/user", method = RequestMethod.GET)
	public String impersonateUser() {
		String url = "impersoanteUser";
		return url;
	}
	
	private String logoutCurrentUser(String agentUid, String sso,Long customerId) {
		String redirectUrl = "redirect:/admin/autologin?agentUid="+agentUid+"&sso="+sso +"&customerId=" +customerId ;
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null) {
			new SecurityContextLogoutHandler().logout(request, response, auth);
			SecurityContextHolder.getContext().setAuthentication(null);
		}
		return redirectUrl;
	}
	
	private String loginNewUser(String agentUid, String sso, Long customerId) throws Exception {
		User user = contactService.getPrimaryUserByCustomerId(customerId);
		if (user == null) throw new Exception("User does not presnet in the portal");
		UserDetails userDetails = userDetailsService.loadUserByUsername(user.getEmailAddress());
		SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(userDetails.getUsername(), userDetails.getPassword()));

		setAgentDetailsInSession(agentUid, sso);
        
        request.getSession().setAttribute("usInfo", user);	
        request.getSession().setAttribute("accInfo", user.getCustomer());
        
		String url = "redirect:/home?agentUid="+agentUid;
		url = "forward:/admin/impersonate/user";
		return url;
	}
	
	private void setAgentDetailsInSession(String agentUid, String sso) {
		this.agentUid = agentUid;
		this.sso = sso;
		request.getSession().setAttribute("agentUid", agentUid);
	}
	
	//-------------------------------
	@RequestMapping(value = "/admin/yAgentSearchUser", method = RequestMethod.GET)
	public ModelAndView yAgentSearchUser(String agentUid,String sso) {
		this.agentUid = agentUid;
		this.sso = sso;
		request.getSession().setAttribute("agentUid", agentUid);
		
		 Model model = new ExtendedModelMap();
	        try {            
	            model.addAttribute("locations", locationDao.findAll());
	            model.addAttribute("bayAreaLocations", locationDao.getLocationsByArea("Bay Area"));
	            
	        } catch (Exception se) {
	            System.out.println("Error occoured while querying Product");
	            log.error("Error  ",se);
	        }
		//return "yAgentSearchUser";
		 return new ModelAndView("yAgentSearchUser", model.asMap());    
	}
	
	
	@RequestMapping(value = "/admin/YAgentConsoleMembershipSearch", method = RequestMethod.GET)
	public @ResponseBody ModelAndView YAgentConsoleMembershipSearch(@RequestParam(value = "customerId") Long customerId ,@RequestParam(value = "location") Long location,	final HttpServletRequest request, final HttpServletResponse response) {
		log.info(" agent id " + agentUid + " , sso " + sso);
		
	
		

		  Account account = null;
		  Activity activity=null;
		  User user = contactService.getPrimaryUserByCustomerId(customerId);
		  System.out.println("contact id-"+user.getContactId());
		  account = accountDao.findByAccountId(customerId);
		  //--------------------Check Guest Count-------------------------------------------
		  List<Activity> guestCheckin=new ArrayList<Activity>();
		  guestCheckin=activityDao.findByTypeAndCustomerAndContact("Guest Pass", account, user);
	  		int GuestCountCheck=guestCheckin.size();
	  		if(GuestCountCheck==0){
	  			GuestCountCheck=0;
	  		}
	//	  System.out.println(GuestCountCheck);
		  
		  //------------------------chk running count of a customer------------------------------
		  List<Activity> guestCountIntr=new ArrayList<Activity>();
  		guestCountIntr=activityDao.findByTypeAndCustomerAndContact("CHECKIN", account, user);
  		int runningCount=guestCountIntr.size();
  		if(runningCount==0){
  			 activity=null;
  		 
  		}else if(runningCount>1){
  			activity=guestCountIntr.get(runningCount-1);
  			 
  		}else{
  			activity=guestCountIntr.get(0);
  		}
		  Model model = new ExtendedModelMap();
		  
		  //------------------------------Chk avg checkin in month------------------------------------
				  	//Get month start date
		  
		  	Calendar currentDate= Calendar.getInstance();
			currentDate.set(Calendar.DAY_OF_MONTH, 1);
			Date MonthStartDate=currentDate.getTime();
			System.out.println("Month Start Date"+MonthStartDate);
			
			//get month last date
			Calendar currentDate1 = Calendar.getInstance();
		    int MonthlastDateCount = currentDate1.getActualMaximum(Calendar.DATE);
		    currentDate1.set(Calendar.DATE, MonthlastDateCount);
			Date MothLastDate=currentDate1.getTime();
			//System.out.println("Month End Date"+MothLastDate);
			
			List<Activity> monthlyCheckin= activityDao.findByCustomerAndContactAndCreatedDateBetween(account, user, MonthStartDate, MothLastDate);
			int totalMonthlyCheckin=monthlyCheckin.size();
			System.out.println("total monthly checkin"+totalMonthlyCheckin);
			int avgmonthlycheckin=(totalMonthlyCheckin*30)/30;
			//System.out.println("avg monthly chkin"+avgmonthlycheckin);
			 //------------------------------Chk avg checkin in a week------------------------------------
			Date date = new Date();
			Calendar c = Calendar.getInstance();
			c.setTime(date);
			int dayOfWeek = c.get(Calendar.DAY_OF_WEEK) - c.getFirstDayOfWeek();
			c.add(Calendar.DAY_OF_MONTH, -dayOfWeek);

			Date weekStart = c.getTime();
			//System.out.println("week satart date"+weekStart);
			// we do not need the same day a week after, that's why use 6, not 7
			c.add(Calendar.DAY_OF_MONTH, 6); 
			Date weekEnd = c.getTime();
			System.out.println("week end date"+weekEnd);
			List<Activity> weeklyCheckin=activityDao.findByCustomerAndContactAndCreatedDateBetween(account, user, weekStart, weekEnd);
			int totalweeklyCheckin=weeklyCheckin.size();
			//System.out.println("total weekly checkin"+totalweeklyCheckin);
			int avgweeklyCheckin=(totalweeklyCheckin*7)/7;
			//System.out.println("avg weekly checkin"+avgweeklyCheckin);
		 // try{
		if(account != null && user !=null )
		{ 
		    int userCount = account.getUser().size();
		    List<User> userS = new ArrayList<User>();
		    int countmembers = 0;
		    if (userCount > 1) 
		    {
		     for (User u : account.getUser()) 
		     {
		      if (user.getPrimaryEmailAddress() != null && u.getPrimaryEmailAddress() != null && !user.getPrimaryEmailAddress().equalsIgnoreCase(u.getPrimaryEmailAddress())) 
		      {
		      countmembers = countmembers + 1;
		      userS.add(u);
		      }
		     }
		    }
		    
		    //------------------------Calculate primary user age-----------------------------------------------------
		    
			if(user.getDateOfBirth()!=null){
				MemberAge mAge = new MemberAge();
				Integer age = 0;// u -> user records fetched from Contact table for the logged in Member. Refer String getContactS method on CommonController
				age = mAge.getAge(user.getDateOfBirth());//pass the DOB of user to the method and it returns int Age only in Years.
				user.setAge(age);
			}
			System.out.println("user age="+user.getAge());
			//----------------------------Calculate other family members age-------------------------------------------
			if(!userS.isEmpty()){
				for(User u:userS){
					 MemberAge mAge = new MemberAge();
						Integer age = 0;
						if(u.getDateOfBirth()!=null){ // u -> user records fetched from Contact table for the logged in Member. Refer String getContactS method on CommonController
							age = mAge.getAge(u.getDateOfBirth());//pass the DOB of user to the method and it returns int Age only in Years.
							u.setAge(age);
						}
				}
			}
				
		    
		  //  Signup signup=signupDao.getByCustomerAndContact(account, user);
		    System.out.println(user.getfNameAndLName());
		    List<Signup> signuplst=signupDao.findByContactNameAndCustomerAndContact(user.getfNameAndLName(), account, user);
		    //Signup signup=signupDao.findByContactNameAndCustomerAndContact(user.getfNameAndLName(), account, user);
		   // System.out.println(signup.getItemDetail().getDescription());
		  //  if(signup!=null && signup.getStatus().equals("ACTIVE")){
		    if(!signuplst.isEmpty() ){
		    	/*Calendar cal1_EndDate = Calendar.getInstance();
		    	cal1_EndDate.setTime(signup.getProgramEndDate());
    	    	Calendar cal2_CurrentDate = Calendar.getInstance();
    	    	if(cal1_EndDate.after(cal2_CurrentDate)){*/
		    	Signup signup=signuplst.get(0);
		    	if(signup.getType().equals("MEMBERSHIP") && signup.getStatus().equals("ACTIVE")){
		    		
		    	
		    	    	model.addAttribute("accessGranted", "ACCESS GRANTED...!!");
		    	    	model.addAttribute("accessDenied", "ACCESS DENIED...!!");
		    	    	model.addAttribute("usInfo", user);
		    	    	model.addAttribute("userCount", countmembers);
		    		    model.addAttribute("userS", userS);
		    		    model.addAttribute("signup", signup);
		    		    model.addAttribute("runnignCount",runningCount);
		    		    model.addAttribute("activity",activity);
		    		    model.addAttribute("avgWeeklyCheckin",avgweeklyCheckin);
		    		    model.addAttribute("avgMonthlyCheckin",avgmonthlycheckin);
		    		    model.addAttribute("guestCountCheckIn",GuestCountCheck);
		    	    	
		    	}else if(signup.getType().equals("MEMBERSHIP") && signup.getStatus().equals("INACTIVE")){
			    		model.addAttribute("accessGranted", "ACCESS GRANTED...!!");
		    	    	model.addAttribute("accessDenied", "ACCESS DENIED...!!");
		    	    	model.addAttribute("usInfo", user);
		    	    	model.addAttribute("userCount", countmembers);
		    		    model.addAttribute("userS", userS);
		    		    model.addAttribute("signup", signup);
		    		    model.addAttribute("runnignCount",runningCount);
		    		    model.addAttribute("activity",activity);
		    		    model.addAttribute("inactiveMembership","You have INACTIVE membership.");
		    		    model.addAttribute("avgWeeklyCheckin",avgweeklyCheckin);
		    		    model.addAttribute("avgMonthlyCheckin",avgmonthlycheckin);
		    		    model.addAttribute("guestCountCheckIn",GuestCountCheck);
		    	
		    	}
		    	
		    	
		    }else{
		    	
		  
		    	model.addAttribute("accessGranted", "ACCESS GRANTED...!!");
    	    	model.addAttribute("accessDenied", "ACCESS DENIED...!!");
    	    	model.addAttribute("usInfo", user);
    	    	model.addAttribute("userCount", countmembers);
    		    model.addAttribute("userS", userS);
    		    model.addAttribute("runnignCount",runningCount);
    		    model.addAttribute("activity",activity);
    		    model.addAttribute("guestCountCheckIn",GuestCountCheck);
		    }
    	    	
    	    	/*return new ModelAndView("YAgentMemberCheckin", model.asMap());
		    }else{
		    	return new ModelAndView("YAgentMemberCheckin", model.asMap());
		    }*/
    	    	
		   	    
		
	}
		//return new ModelAndView("YAgentMemberCheckin", model.asMap());
	
		//return new ModelAndView("YAgentMemberCheckin", model.asMap());
		
		return new ModelAndView("testLayout", model.asMap());
		 /* }catch(Exception e){
	 return new ModelAndView("error", model.asMap());
		  }*/
}
	
	
	@RequestMapping(value = "/admin/checkIn_PrimaryMember", method = RequestMethod.GET)
	public @ResponseBody String YAgentConsoleCheckIn_PrimaryMember(@RequestParam(value = "memberContactId") Long memberContactId, @RequestParam(value = "location") Long location,	final HttpServletRequest request, final HttpServletResponse response) {
		log.info(" agent id " + agentUid + " , sso " + sso);
		System.out.println(memberContactId);
		 Account account = null;
		 User user=null;
		 Activity activity1=null;
		 try{
		if(memberContactId!=null){
			
			user=userDao.getByContactId(memberContactId);
			
			account = accountDao.findByAccountId(user.getCustomer().getAccountId());
			if( user !=null)
			{ 
				    int userCount = account.getUser().size();
				    List<User> userS = new ArrayList<User>();
				    int countmembers = 0;
				    if (userCount > 1) 
					{
					     for (User u : account.getUser()) 
					     {
					      if (user.getPrimaryEmailAddress() != null && u.getPrimaryEmailAddress() != null && !user.getPrimaryEmailAddress().equalsIgnoreCase(u.getPrimaryEmailAddress())) 
					      {
					      countmembers = countmembers + 1;
					      userS.add(u);
					      }
					     }
					 }
				    
					    for(User u:userS){
					    	System.out.println(u.getPersonFirstName());
					    	System.out.println(u.getPersonLastName());
					    	System.out.println(u.getFacilityAccessNumber());
					    	System.out.println(u.getPartyId());
					    }
					  
				    Signup signup=signupDao.getByCustomerAndContact(user.getCustomer(), user);
					  //  System.out.println(signup.getItemDetail().getDescription());
						    if(signup!=null && signup.getStatus().equals("ACTIVE"))
						    {
						    	Calendar cal1_EndDate = Calendar.getInstance();
						    	cal1_EndDate.setTime(signup.getProgramEndDate());
				    	    	Calendar cal2_CurrentDate = Calendar.getInstance();
						    	    	if(cal1_EndDate.after(cal2_CurrentDate))
						    	    	{
						    	    	
						    	    	Activity activity=new Activity();
						    	    	activity.setCreatedDate(new Date());
						    	    	activity.setCustomer(account);
						    	    	activity.setContact(user);
						    	    	activity.setSignup(signup);
						    	    	activity.setDescription("Member Checkin");
						    	    	activity.setLastUpdated(cal2_CurrentDate);
						    	    	activity.setType("CHECKIN");
						    	    	activity.setFacilityLoationCheckedInTo(location);
						    	    	activity1=activityDao.saveAndFlush(activity);
						    	    	
						    	    	System.out.println("user chkd in");
						    	    	
						    	    	}
						    	    	
						    }
					  }
						    
			}
		if(activity1!=null){
			return "GRANTED";
		}else{
			return "DENY";
		}
		 }catch(Exception ex){
			 return "DENY";
		 }
		
			
	}		
	

	 @RequestMapping(value= "/admin/checkIn_member", method = RequestMethod.GET)
	 public @ResponseBody String checkInOtherMember(@RequestParam(value = "memberContactId") Long memberContactId, @RequestParam(value = "location") Long location,final HttpServletRequest request, final HttpServletResponse response) {
		System.out.println(memberContactId);
		// Account account = null;
		System.out.println("Loc id="+location);
	 	JSONArray json = new JSONArray();
		JSONObject obj = new JSONObject();	
		 User user=null;
		 if(memberContactId != null && !"".equals(memberContactId)){
			// account = accountDao.getByEmail(userId);	
			 	user=userDao.getByContactId(memberContactId);
			 	long accId=user.getCustomer().getAccountId();
			 	System.out.println("acc id"+accId);
			 	Account account=accountDao.findByAccountId(accId);
			 	long userID=user.getContactId();
			 	System.out.println("user Id-"+userID);
			 	System.out.println(user.getSignupId());
			 	try{
			 	 Signup signup=signupDao.getByCustomerAndContact(account, user);
				  //  System.out.println(signup.getItemDetail().getDescription());
					    if(signup!=null && signup.getStatus().equals("ACTIVE") && !user.getSexOffender().equals("Yes"))
					    {
			 	
							 	Calendar cal2_CurrentDate = Calendar.getInstance();
							 	Activity activity=new Activity();
				    	    	activity.setCreatedDate(new Date());
				    	    	activity.setCustomer(user.getCustomer());
				    	    	activity.setContact(user);
				    		    activity.setSignup(signup);
				    	    	activity.setDescription("Family Member Checkin");
				    	    	activity.setLastUpdated(cal2_CurrentDate);
				    	    	activity.setType("CHECKIN");
				    	    	activity.setFacilityLoationCheckedInTo(location);
				    	    	activityDao.saveAndFlush(activity);
				    	    	
				    	    	obj.put("signupMemShipName", signup.getItemDetail().getRecordName());
				    	    	obj.put("accessGranted","Access Granted..!!");
				    	    	obj.put("lastCheckedInDate", new Date());
				    	    	 List<Activity> guestCountIntr=new ArrayList<Activity>();
				    	   		guestCountIntr=activityDao.findByTypeAndCustomerAndContact("CHECKIN", account, user);
				    	   		int runningCount=guestCountIntr.size();
				    	    	obj.put("ChkedIncount", runningCount);
				    	    	obj.put("Success", "Success");
				    	    	obj.put("secUserLoc", signup.getLocation().getRecordName());
    	    	
				    	    	System.out.println("family member checkin.");
				    	    	json.add(obj);
				    	    	//return "SUCCESS";	
				    	    	return json.toString();
					    }else{
					    	obj.put("signupMemShipName", "Member has No Active Membership..!!");
			    	    	obj.put("accessGranted","Access Denied..!!");
			    	    	//obj.put("lastCheckedInDate", new Date());
			    	    	 List<Activity> guestCountIntr=new ArrayList<Activity>();
			    	   		guestCountIntr=activityDao.findByTypeAndCustomerAndContact("CHECKIN", account, user);
			    	   		int runningCount=guestCountIntr.size();
			    	    	obj.put("ChkedIncount", runningCount);
			    	    	Activity act=guestCountIntr.get(runningCount-1);
			    	    	
			    	    	obj.put("secLastChkedInDate", act.getLastUpdated());
	    	
			    	    	
			    	    	json.add(obj);
			    	    	return json.toString();
					    }
			 	}catch(Exception es){
			 		obj.put("signupMemShipName", "Member has No Active Membership..!!");
	    	    	obj.put("accessGranted","Access Denied..!!");
	    	    	//obj.put("lastCheckedInDate", new Date());
	    	    	 List<Activity> guestCountIntr=new ArrayList<Activity>();
	    	   		guestCountIntr=activityDao.findByTypeAndCustomerAndContact("CHECKIN", account, user);
	    	   		int runningCount=guestCountIntr.size();
	    	    	obj.put("ChkedIncount", runningCount);
	    	    	Activity act=guestCountIntr.get(runningCount-1);
	    	    	
	    	    	
	    	    	obj.put("secLastChkedInDate", act.getLastUpdated());
	    	    	
	
	    	    	
	    	    	json.add(obj);
	    	    	return json.toString();
			 	}
		 	
		 }else{
			 return null;
		 }
	 }
	
	
	 
	 
	 //Allow unauthorised access
	 
	 @RequestMapping(value = "/admin/allowUnAuthorisedAccess", method = RequestMethod.GET)
		public @ResponseBody String allowUnAuthorisedAccess(@RequestParam(value = "memberContactId") Long memberContactId,@RequestParam(value = "location") Long location,	final HttpServletRequest request, final HttpServletResponse response) {
			log.info(" agent id " + agentUid + " , sso " + sso);
			System.out.println(memberContactId);
			 Account account = null;
			 User user=null;
			 Activity activity1=null;
			if(memberContactId!=null){
				
				user=userDao.getByContactId(memberContactId);
				System.out.println(user.getUnauthorizedAccessCount());
				if(user.getUnauthorizedAccessCount()==null){
					user.setUnauthorizedAccessCount(0);
				}
				int a=user.getUnauthorizedAccessCount();
				System.out.println(a);
				account = accountDao.findByAccountId(user.getCustomer().getAccountId());
				if(account != null && user !=null && user.getUnauthorizedAccessCount() < 3)
				{ 
					    int userCount = account.getUser().size();
					    List<User> userS = new ArrayList<User>();
					    int countmembers = 0;
					    if (userCount > 1) 
						{
						     for (User u : account.getUser()) 
						     {
						      if (user.getPrimaryEmailAddress() != null && u.getPrimaryEmailAddress() != null && !user.getPrimaryEmailAddress().equalsIgnoreCase(u.getPrimaryEmailAddress())) 
						      {
						      countmembers = countmembers + 1;
						      userS.add(u);
						      }
						     }
						 }
					    
						    
						    int unAutAcc=user.getUnauthorizedAccessCount()+1;
						    System.out.println(unAutAcc);
						   
						    
						    user.setUnauthorizedAccessCount(unAutAcc);
						    userDao.save(user);
						 
							    	Calendar cal1_EndDate = Calendar.getInstance();
							    	//cal1_EndDate.setTime(signup.getProgramEndDate());
					    	    	Calendar cal2_CurrentDate = Calendar.getInstance();
							    	    	
							    	    	Activity activity=new Activity();
							    	    	activity.setCreatedDate(new Date());
							    	    	activity.setCustomer(account);
							    	    	activity.setContact(user);
							    	    	//activity.setSignup(signup);
							    	    	activity.setDescription("UnAuthorised Member Checkin");
							    	    	activity.setLastUpdated(cal2_CurrentDate);
							    	    	activity.setType("CHECKIN");
							    	    	activity.setFacilityLoationCheckedInTo(location);
							    	    	activity1=activityDao.saveAndFlush(activity);
							    	    	System.out.println("user chkd in");
							    	    	
							    	    	//}
							    	    	
							   // }
						  }
							    
				}
			if(activity1!=null){
				return "GRANTED";
			}else{
				return "DENY";
			}
			
				
		}	
	 
	 //addGuest page display
	
	 @RequestMapping(value = "/admin/addGuest", method = RequestMethod.GET)
	 public ModelAndView addGuest(final HttpServletRequest request, final HttpServletResponse response) {
			
		 Model model = new ExtendedModelMap();

		 model.addAttribute("account", new Account()); 

			return new ModelAndView("addGuest", model.asMap());
		}
	
	 
	 //addGuest checkin process
	 
	 @RequestMapping(value= "/admin/addGuest", method = RequestMethod.POST)
		public @ResponseBody String addGuest1(Account account, @RequestParam(value = "primContId") Long primContId ,final HttpServletRequest request, final HttpServletResponse response) {
			
		 User PrimaryUser=null;
		 Account accountPrimaryUser=null;
		 if(primContId != null && !"".equals(primContId)){
				// account = accountDao.getByEmail(userId);	
			 		PrimaryUser=userDao.getByContactId(primContId);
				 	long accId=PrimaryUser.getCustomer().getAccountId();
				 	System.out.println("acc id"+accId);
				 	accountPrimaryUser=accountDao.findByAccountId(accId);
				 	long userID=PrimaryUser.getContactId();
		 }
		 
		 
		 
		 	JSONArray json = new JSONArray();
			JSONObject obj = new JSONObject();		
			boolean isContactExists = false;
	    	Account accountVO = null;
	    	List<Object[]> accLst = null;
			List<User> contactLst =  new ArrayList<User>();
	    	
			
	    	if(account != null && !StringUtils.isBlank(account.getFirstName()) && !StringUtils.isBlank(account.getLastName()) && !StringUtils.isBlank(account.getEmail()) && account.getDateOfBirth() != null){
	    		accLst =  accountDao.getByFirstNameAndLastNameAndEmailAddressAndDateOfBirth(account.getFirstName(), account.getLastName(), account.getEmail(), account.getDateOfBirth());
	    	}
	    	//int guestCount=accLst.size();
	    	//if(guestCount<5)
	    	//{
	    		Account accountDB = null;
	    		User userDb = null;    	
	    		if(accLst != null && !accLst.isEmpty()){
	    		
	    		accountDB = (Account) accLst.get(0)[0];	
	    		
	    		System.out.println(accountDB.getEmail());
	    		userDb =  (User) accLst.get(0)[1];
	    		System.out.println(userDb.getFullName());
	    		
	    		Signup signup=signupDao.getByCustomerAndContact(accountDB, userDb);
	    		
	    		List<Activity> guestCountIntr=new ArrayList<Activity>();
	    		guestCountIntr=activityDao.findByTypeAndCustomerAndContact("Guest Pass", accountPrimaryUser, PrimaryUser);
	    		int guestCount=guestCountIntr.size();
	    		if(guestCount<5){
		    		Activity activity=new Activity();
	    	    	activity.setCreatedDate(new Date());
	    	    	activity.setCustomer(accountPrimaryUser);
	    	    	activity.setContact(PrimaryUser);
	    	    	activity.setSignup(signup);
	    	    	activity.setDescription("Guest Member Checkin");
	    	    	Calendar cal2_CurrentDate = Calendar.getInstance();
	    	    	activity.setLastUpdated(cal2_CurrentDate);
	    	    	activity.setType("Guest Pass");
	    	    	activityDao.saveAndFlush(activity);
	    	    	System.out.println("guest chkd in");
		    		
	    	    	obj.put("Success", "Success");
	    	    	obj.put("guestCount",guestCount+1);
					json.add(obj);
					return json.toString();
		    		}
		    		else{
		    			obj.put("Duplicate", "Duplicate");
						json.add(obj);
						isContactExists = true;
						return json.toString();
		    		}
	    			
	    		}else{    			
	    	    	try{
	    	    		if(account!=null){
	    	    			account.setName(account.getFirstName()+account.getLastName());
	    	    			accountVO=accountDao.saveAndFlush(account);
	    	    			System.out.println("customer created");
	    	    			User user = new User();
	    	    			
	    	    			user.setCustomer(accountVO);
	    	    			
	    	    			user.setDateOfBirth(account.getDateOfBirth());
	    	    	    	user.setEnabled(true);	
	    	    	    	user.setAccountExpired(false);
	    	    	    	user.setAccountLocked(false);
	    	    	    	user.setCredentialsExpired(false);
	    	    			user.setActive(true);    			
	    	    			user.setUsername(account.getEmail());    			
	    	     	    	user.setFirstName(account.getFirstName());
	    	    			user.setLastName(account.getLastName());
	    	    			user.setfNameAndLName(user.getFullName());     	    	
	    	     	    	if(account != null && account.getGender() != null && account.getGender().equals("Male")){
	    	     	    		user.setProfileImage(Constants.DEFAULT_PROFILE_IMAGE_MALE);
	    	    			}else{
	    	    				user.setProfileImage(Constants.DEFAULT_PROFILE_IMAGE_FEMALE);
	    	    			}
	    	     	    	user.setEmailAddress(account.getEmail());
	    	     	    	user.setFormattedPhoneNumber(account.getPhoneNumber());
	    	     	    	user.setGender(account.getGender());     	    	    	
	    	     	    	user.setEnabled(true);	     	    	
	    	     	    	//user.setContactPointPurpose(account.getHomeNumber());     	    	
	    	     	    	Calendar cal = Calendar.getInstance();
	    	     	    	user.setLastUpdated(cal);
	    	     	    	
	    	     	    	Address address =  new Address();
	    	    			address.setPrimaryAddressLine1(accountVO.getAddressLine1());
	    	    			address.setPrimaryAddressLine2(accountVO.getAddressLine2());
	    	    			address.setPrimaryAddressCity(accountVO.getCity());
	    	    			address.setPrimaryAddressProvince(accountVO.getState());
	    	    			address.setPrimaryAddressPostalCode(accountVO.getPostalCode());			
	    	    			address.setPrimaryAddressCountry(Constants.COUNTRY_USA);
	    	    			user.setAddress(address);
	    	     	    	
	    	     	    	user = userDao.save(user);
	    	     	    	
	    	     	    	System.out.println("contact  created");
	    	     	    	AccountContact accContact = accountContactService.saveAccountContact(accountVO, user);
	    	     	    	
	    	     	    	List<ItemDetail> itemDetail=itemDetailDao.findByType_AndCategory_("Guest Pass", "Guest Pass");
	    	     	    	
	    	     	    	if(accountVO!=null && user!=null && itemDetail!=null){
	    	     	    		Signup signup=new Signup();
	    	     	    		signup.setCustomer(accountVO);
	    	     	    		signup.setContact(user);
	    	     	    		signup.setContactName(user.getfNameAndLName());
	    	     	    		signup.setProgramStartDate(new Date());
	    	     	    		signup.setItemDetail(itemDetail.get(0));
	    	     	    		signup.setLastUpdated(Calendar.getInstance());
	    	     	    		signup.setLocation(itemDetail.get(0).getLocation());
	    	     	    		signup.setSignupDate(new Date());
	    	     	    		signup.setStatus("ACTIVE");
	    	     	    		signup.setType("Guest Pass");
	    	     	    		signup.setRegistrationFee(0);
	    	     	    		signup.setSetUpFee(0.0);
	    	     	    		signup.setDeposit(0);
	    	     	    		
	    	     	    		signup.setPortalLastModifiedBy(agentUid);
	    	     	    		
	    	     	    		signup=signupDao.save(signup);
	    	     	    		
	    	     	    		
	    	     	    		System.out.println("signup record created");
	    	     	    	
	    	     	    		if(signup!=null){
	    	     	    			Opportunity opportunity=new Opportunity();
	    	     	   	    	
	    	     	   	    		opportunity.setContact_c(user.getContactId().toString());
	    	     	   	    		opportunity.setCustomerAccountId_c(accountVO.getAccountId().toString());
	    	     	   	    		opportunity.setName(accountVO.getName());
	    	     	   	    		opportunity.setSignup(signup);
	    	     	   	    		opportunity.setType("MEMBERSHIP");
	    	     	   	    		Calendar LastUpdated = Calendar.getInstance();
	    	     	   		    	opportunity.setLastUpdated(LastUpdated);
	    	     	   		    	opportunity=opportunityDao.save(opportunity);
	    	     	   	    	
	    	     	   	    	System.out.println("opp save");
	    	     	   	    	
	    	     	    		}
	    	     	    		if(signup!=null){
	    	     	    			Activity activity=new Activity();
					    	    	activity.setCreatedDate(new Date());
					    	    	activity.setCustomer(accountPrimaryUser);
					    	    	activity.setContact(PrimaryUser);
					    	    	activity.setSignup(signup);
					    	    	activity.setDescription("Guest member Checked-In");
					    	    	activity.setLastUpdated(Calendar.getInstance());
					    	    	activity.setType("Guest Pass");
					    	    	activity=activityDao.saveAndFlush(activity);
					    	    	System.out.println(" guest user chkd in");
	    	     	    		}
	    	     	    	
	    	     	    	}
	    	     	    	obj.put("Success", "Success");
	    	     	    	List<Activity> guestCountIntr=new ArrayList<Activity>();
	    		    		guestCountIntr=activityDao.findByTypeAndCustomerAndContact("Guest Pass", accountPrimaryUser, PrimaryUser);
	    		    		int guestCount=guestCountIntr.size();
	    	     	    	obj.put("guestCount",guestCount);
	    					json.add(obj);
	    					return json.toString();
	    	    		}
	    	    		
	    	    	}catch(Exception e){
	    	    		log.error("Error  ",e);
	    	    		return null;
	    	    	}  
	    		}
		        
	    	
			return null;
		}
	
	
	
	
	
	
	
	
	
}
