package com.ymca.web.controller;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.ymca.dao.AccountDao;
import com.ymca.dao.DonationDao;
import com.ymca.dao.ProgramDao;
import com.ymca.model.Account;
import com.ymca.model.Donation;
import com.ymca.model.Interaction;
import com.ymca.model.Membership;
import com.ymca.model.Program;
import com.ymca.model.User;
import com.ymca.web.model.OtherPrograms;

@Controller
public class HomePage {

	@Resource
	private DonationDao donationDao;

	@Resource
	private AccountDao accountDao;

	@Resource
	private ProgramDao programDao;

	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public ModelAndView index(final HttpServletRequest request,
			final HttpServletResponse response) {
		// HttpSession session = request.getSession();
		Authentication a = SecurityContextHolder.getContext()
				.getAuthentication();
		String userId = ((UserDetails) a.getPrincipal()).getUsername();
		Model model = new ExtendedModelMap();
		Account account = null;
		User user = null;

		if (userId != null && !"".equals(userId)) {
			account = accountDao.getByEmail(userId);
			request.setAttribute("userId", userId);
			if (account != null && account.getUser() != null) {
				for (Iterator<User> it = account.getUser().iterator(); it
						.hasNext();) {
					user = it.next();

				}
			}

			int userCount = account.getUser().size();
			List<User> userS = new ArrayList<User>();
			if (userCount > 1) {
				for (User u : account.getUser()) {
					if (!user.getUsername().equalsIgnoreCase(u.getUsername())) {
						userS.add(u);
					}
				}
			}

			model.addAttribute("userS", userS);

			List<Program> programList = programDao.findAll();
			Collections.sort(programList, Program.DATE_ORDER_DEC_COMPARATOR);

			model.addAttribute("programList", programList);

			HttpSession session = request.getSession();			            
            session.setAttribute("usInfo", user);
            session.setAttribute("programList", programList);
			
			List<Donation> donationList = donationDao.findAll();

			Collections.sort(donationList, Donation.DATE_ORDER_DEC_COMPARATOR);
			model.addAttribute("donationList", donationList);
			model.addAttribute("usInfo", user);

			List<OtherPrograms> OtherProgramsList = new ArrayList<OtherPrograms>();
			OtherPrograms otherPrograms = new OtherPrograms();
			otherPrograms.setName("Fany");
			otherPrograms.setPrograms("Zumba Class");
			otherPrograms.setText("SIGN UP");
			OtherPrograms otherPrograms2 = new OtherPrograms();
			otherPrograms2.setName("Fany");
			otherPrograms2.setPrograms("Spin Class");
			otherPrograms2.setText("SIGN UP");
			OtherProgramsList.add(otherPrograms);
			OtherProgramsList.add(otherPrograms2);
			model.addAttribute("otherPrograms", OtherProgramsList);
			return new ModelAndView("customer_home", model.asMap());
		} else {
			model.addAttribute("errMsg", "Please Login");
			return new ModelAndView("login", model.asMap());

		}
	}

	@RequestMapping(value = "/currentmembership", method = RequestMethod.GET)
	public ModelAndView currentMembershipView() {

		Authentication a = SecurityContextHolder.getContext()
				.getAuthentication();
		String userId = ((UserDetails) a.getPrincipal()).getUsername();

		Model model = new ExtendedModelMap();

		Account account = null;
		User user = null;
		Membership member = null;
		if (userId != null && !"".equals(userId)) {
			account = accountDao.getByEmail(userId);
			if (account != null && account.getMembership() != null) {
				member = account.getMembership();
				model.addAttribute("member", member);

			}

			if (account != null && account.getUser() != null) {
				for (Iterator<User> it = account.getUser().iterator(); it
						.hasNext();) {
					user = it.next();

				}
			}

			int userCount = account.getUser().size();
			List<User> userS = new ArrayList<User>();
			int countmembers = 0;
			if (userCount > 1) {
				for (User u : account.getUser()) {
					if (!user.getUsername().equalsIgnoreCase(u.getUsername())) {
						countmembers = countmembers + 1;
						userS.add(u);
					}
				}
			}
			model.addAttribute("userCount", countmembers);

			model.addAttribute("userS", userS);
			model.addAttribute("usInfo", user);
		} else {
			model.addAttribute("errMsg",
					com.ymca.web.util.Constants.NO_RECORDS_FOUND);
		}

		return new ModelAndView("currentmembership", model.asMap());

	}
	
	
	@RequestMapping(value = "/fullUpcomingPrograms", method = RequestMethod.GET)
	public ModelAndView fullUpcomingPrograms() {

		Authentication a = SecurityContextHolder.getContext()
				.getAuthentication();
		String userId = ((UserDetails) a.getPrincipal()).getUsername();

		//Model model = new ExtendedModelMap();

				return new ModelAndView("fullUpcomingPrograms");

	}
}