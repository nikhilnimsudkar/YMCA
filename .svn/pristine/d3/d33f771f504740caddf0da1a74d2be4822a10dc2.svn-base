package com.ymca.web.service;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import net.sf.json.JSONObject;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.ymca.dao.AssociatedOtherContactsDao;
import com.ymca.dao.InvoiceDao;
import com.ymca.dao.JetPayPaymentDao;
import com.ymca.dao.LocationDao;
import com.ymca.dao.PayerDao;
import com.ymca.dao.PaymentDao;
import com.ymca.dao.PaymentMethodDao;
import com.ymca.dao.SignupDao;
import com.ymca.model.Account;
import com.ymca.model.AssociatedOtherContacts;
import com.ymca.model.Invoice;
import com.ymca.model.ItemDetail;
import com.ymca.model.JetPayPayment;
import com.ymca.model.Payer;
import com.ymca.model.Payment;
import com.ymca.model.PaymentMethod;
import com.ymca.model.Signup;
import com.ymca.model.User;
import com.ymca.web.enums.BillingOptionEnum;
import com.ymca.web.enums.PaymentModeEnum;
import com.ymca.web.enums.PaymentTypeEnum;
import com.ymca.web.enums.ProductTypeEnum;
import com.ymca.web.util.Constants;

@Service 
public class PaymentService  {
	
	
	@Resource
	private PaymentMethodDao paymentMethodDao;
	
	@Resource
	private SignupDao signupDao;
	
	@Resource
	private JetPayPaymentDao jetPayPaymentDao;
	
	@Resource
	private PaymentDao paymentDao;
	
	@Resource
	private PayerDao payerDao;
	
	@Resource
	private InvoiceDao invoiceDao;
	
	@Resource
	private LocationDao locationDao;
	
	@Resource
	private AssociatedOtherContactsDao associatedOtherContactsDao;
	
	private Logger log = LoggerFactory.getLogger(PaymentService.class); 

	@SuppressWarnings("deprecation")
	public Signup savesignup(String paymentId, Account customer, JSONObject cartItemMap, ItemDetail itemDetail, User u, String portalLastModifiedBy, String signupstatus) {

		Object itempriceOnSignup = cartItemMap.get("itempriceOnSignup");
		Object discount = cartItemMap.get("discount");
		Object fa = cartItemMap.get("fa");
		//Object FAobj = cartItemMap.get("FAobj");
		Object signupAmount = cartItemMap.get("signupAmount");
		Object setupFee = cartItemMap.get("setupFee");
		Object registrationFee = cartItemMap.get("registrationFee");
		Object depositAmount = cartItemMap.get("depositAmount");
		Object priceOption = cartItemMap.get("priceOption");
		Object FApercent = cartItemMap.get("FApercent");
		Object FAstartDate = cartItemMap.get("FAstartDate");
		Object FAendDate = cartItemMap.get("FAendDate");
		Object billingOption = cartItemMap.get("billingOption");
		Object gradeLevel = cartItemMap.get("gradeLevel");
		Object noOfTickets = cartItemMap.get("noOfTickets");
		Object specialrequest = cartItemMap.get("specialrequest");
		Object joinFee = cartItemMap.get("joinFee");
		Object selectedStartDate = cartItemMap.get("selectedStartDate");
		Object nextBillDateObj = cartItemMap.get("nextBillDate");
		
		Signup signup = new Signup();
		signup.setCustomer(customer);
		signup.setPortalLastModifiedBy(portalLastModifiedBy);
		//signup.setItemDaysMapId(ids.getItemDaysId()+"_"+ids.getItemDetails().getId());
		//signup.setItem(ids.getProduct());
		signup.setItemDetail(itemDetail);
		signup.setSignUpName(itemDetail.getRecordName());
		signup.setProgramStartDate(itemDetail.getStartDate());
		signup.setProgramEndDate(itemDetail.getEndDate());
		
		Long  loc_id = itemDetail.getLocation().getId();
		signup.setLocation(locationDao.getOne(loc_id));
		
		signup.setContact(u);
		signup.setContactName(u.getFullName());
		/*
		if(Boolean.valueOf(cartItems.get(14)))
			signup.setStatus(Constants.WAITLISTED);
		else
			signup.setStatus(Constants.CONFIRMED);*/
		signup.setStatus(signupstatus);
		
		signup.setWaitlist(0L);
		if(selectedStartDate != null && !selectedStartDate.toString().equals("")){
			signup.setSignupDate(new Date(selectedStartDate.toString()));
		}else{
			signup.setSignupDate(new Date());
		}
		
		signup.setType(itemDetail.getType());
		
		if(Long.parseLong(paymentId)>0){
			List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentMethodByPaymentId(Long.parseLong(paymentId));
			PaymentMethod paymentMethod = lstPaymentMethod.get(0);
			signup.setPaymentMethod(paymentMethod);
		}
		
		// final amount
		//if(Constants.CHILDCARE_TYPE.equals(type.toString())){
			signup.setFinalAmount(itempriceOnSignup.toString());
		/*}else{
			signup.setFinalAmount(itemprice.toString());
		}*/
		// discount amount
		signup.setDiscountAmount(discount.toString());
		signup.setFAamount(fa.toString());
		signup.setSignupPrice(Double.parseDouble(signupAmount.toString()));
		signup.setSetUpFee(Double.parseDouble(setupFee.toString()));
		signup.setRegistrationFee(Double.parseDouble(registrationFee.toString()));
		signup.setDeposit(Double.parseDouble(depositAmount.toString()));
		signup.setSignUpPricingOption(priceOption.toString());
		signup.setFApercentage(FApercent.toString());
		signup.setBillingOption(billingOption.toString());
		signup.setGradeLevel(gradeLevel.toString());
		
		try {
			DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
			DateFormat inputsdf = new SimpleDateFormat("MM/dd/yyyy"); 
			if(FAstartDate != null && !"".equals(FAstartDate.toString()) && !" ".equals(FAstartDate.toString())){
				signup.setFAstartDate(sdf.parse(sdf.format(inputsdf.parse(FAstartDate.toString()))));
			}

			if(FAendDate != null && !"".equals(FAendDate.toString()) && !" ".equals(FAendDate.toString())){
				signup.setFAendDate(sdf.parse(sdf.format(inputsdf.parse(FAendDate.toString()))));
			}
		} catch (ParseException e) {
			log.error("Error  ",e);
		}
		
		if(signup.getType().equals(ProductTypeEnum.EVENT.toString())){
			signup.setNoOfTickets(Integer.parseInt(noOfTickets.toString()));
		}
		signup.setJoinFee(Double.parseDouble(joinFee.toString()));
		signup.setSpecialRequest(specialrequest.toString());
		Calendar cal = Calendar.getInstance();
		signup.setLastUpdated(cal);
		
		System.out.println("  nextBillDateObj.toString() "+nextBillDateObj.toString());
		
		if(nextBillDateObj != null && !nextBillDateObj.equals("") && !nextBillDateObj.toString().equals("null"))
			signup.setNextBillDate(new Date(nextBillDateObj.toString()));

		Signup signupprogram = new Signup();
		signupprogram = signupDao.save(signup);
		return signupprogram;
	}
	public Signup savesignup(String paymentId, Account customer, JSONObject cartItemMap, ItemDetail ids, User u, String portalLastModifiedBy) {
		String signupstatus = Constants.CONFIRMED;
		if(Boolean.valueOf(cartItemMap.get("waitlist").toString()))
			signupstatus = Constants.WAITLISTED;
		
		return savesignup(paymentId, customer, cartItemMap, ids, u, portalLastModifiedBy,signupstatus);
	}
	
	public Payer savepayer(String paymentId, Account customer, JSONObject cartItemMap, ItemDetail ids, Signup signup, String paymentMode) {
		
		Object billingOption = cartItemMap.get("billingOptwwion");
		Object itempriceOnSignup = cartItemMap.get("itempriceOnSignup");
		Object itempriceOnInvoiceAndPayerForNonRecurring = cartItemMap.get("itempriceOnInvoiceAndPayerForNonRecurring");
		Object isRecurringObj = cartItemMap.get("isRecurring");
		
		if(billingOption != null && billingOption.toString().equalsIgnoreCase(BillingOptionEnum.Manual.toString())){
			paymentMode = PaymentModeEnum.Cash.toString();
		}
		
		Payer payer = new Payer();
		payer.setCustomer(customer);
		payer.setStartdate(signup.getProgramStartDate());
		payer.setEnddate(signup.getProgramEndDate());
		/*if(Constants.CHILDCARE_TYPE.equals(type.toString())){
			payer.setAmount(Double.parseDouble(itempriceOnSignup.toString()));
		}else{*/
			if(customer != null && customer.getMembershipFrequency() != null && Constants.MEMBERSHIP_FREQUENCY_ANNUAL.equals(customer.getMembershipFrequency() )){
				payer.setAmount(Double.valueOf(signup.getFinalAmount()));
			} else if(customer != null && customer.getMembershipFrequency() != null && Constants.MEMBERSHIP_FREQUENCY_MONTHLY.equals(customer.getMembershipFrequency() ) && StringUtils.isNotBlank(signup.getFinalAmount())){
				payer.setAmount(signup.getSignupPrice());
			}else {
				//payer.setAmount(Double.parseDouble(itemprice.toString()));
				if(isRecurringObj != null && isRecurringObj.toString().equals("true"))
					payer.setAmount(Double.parseDouble(itempriceOnSignup.toString()));
				else
					payer.setAmount(Double.parseDouble(itempriceOnInvoiceAndPayerForNonRecurring.toString()));
			}
		//}
		payer.setType(Constants.SELF);
		payer.setSignup(signup);
		payer.setPaymentMode(paymentMode);
		Calendar cal = Calendar.getInstance();
		payer.setLastUpdated(cal);
		
		if(Long.parseLong(paymentId)>0){
			List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentMethodByPaymentId(Long.parseLong(paymentId));
			PaymentMethod paymentMethod = lstPaymentMethod.get(0);
			payer.setPaymentMethod(paymentMethod);
		}
		
		Payer p = new Payer();
		p = payerDao.save(payer);
		return p;
	}
	
	@SuppressWarnings("deprecation")
	public Invoice saveinvoice(Account customer, JSONObject cartItemMap, User u, Signup signup, Payer payer) {
		
		Object itempriceOnInvoiceAndPayerForNonRecurring = cartItemMap.get("itempriceOnInvoiceAndPayerForNonRecurring");
		Object itempriceOnInvoiceForRecurring = cartItemMap.get("itempriceOnInvoiceForRecurring");
		Object fa = cartItemMap.get("fa");
		Object dueDateObj = cartItemMap.get("dueDate");
		Object billDateObj = cartItemMap.get("billDate");
		Object isRecurringObj = cartItemMap.get("isRecurring");
		
		Invoice invoice = new Invoice();
		invoice.setCustomer(customer);
		invoice.setContact(u);
		//invoice.setOrderDate(new Date());
		/*Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		if(signup.getItemDetail().getDueDateOffset() != null){
			cal.add(Calendar.DATE, signup.getItemDetail().getDueDateOffset()); // add offset
		}*/
		if(dueDateObj != null && !dueDateObj.equals("") && !dueDateObj.toString().equals("null"))
			invoice.setDueDate(new Date(dueDateObj.toString()));
		if(isRecurringObj != null && isRecurringObj.toString().equals("true"))
			invoice.setAmount(Double.valueOf(itempriceOnInvoiceForRecurring.toString()));
		else
			invoice.setAmount(Double.valueOf(itempriceOnInvoiceAndPayerForNonRecurring.toString()));
		invoice.setSignup(signup);
		invoice.setFAamount(fa.toString());
		invoice.setPayer(payer);
		if(billDateObj != null && !billDateObj.equals("") && !billDateObj.toString().equals("null"))
			invoice.setBillDate(new Date(billDateObj.toString()));
		invoice.setInvoiceDate(new Date());
		Calendar lastUpdCal = Calendar.getInstance();
		invoice.setLastUpdated(lastUpdCal);
		
		Invoice i = new Invoice();
		i = invoiceDao.save(invoice);
		return i;
	}
	
	public Invoice saveinvoice(Account customer, String FAamount, User u, Signup signup, Payer payer) {
		Invoice invoice = new Invoice();
		invoice.setCustomer(customer);
		invoice.setContact(u);
		//invoice.setOrderDate(new Date());
		invoice.setDueDate(new Date());
		invoice.setAmount(payer.getAmount());	
		invoice.setSignup(signup);
		invoice.setFAamount(FAamount);
		invoice.setPayer(payer);
		invoice.setBillDate(new Date());
		invoice.setInvoiceDate(new Date());
		
		Calendar lastUpdCal = Calendar.getInstance();
		invoice.setLastUpdated(lastUpdCal);
		
		Invoice i = new Invoice();
		i = invoiceDao.save(invoice);
		return i;
	}
	
	public JetPayPayment savepayment(String paymentId, String jp_request_hash, String orderNumber,
			Account customer, User u, Signup signupprogram, Payer payer, Invoice invoice, String paymentMode) {
		Payment payment = new Payment();
		
		payment.setPaymentMode(paymentMode);
		JetPayPayment jetPayPayment = null;
		if(StringUtils.isNotBlank(paymentMode) && paymentMode.equals(PaymentTypeEnum.Cash.name())){
			savePaymentByCash(customer, u, signupprogram, payer, invoice, payment);
		}else if(StringUtils.isNotBlank(paymentMode) && paymentMode.equals(PaymentTypeEnum.Check.name())){
			savePaymentByCheck(customer, u, signupprogram, payer, invoice, payment);
		}else{
			jetPayPayment = savePaymentByOrderNumber(paymentId, orderNumber, customer, u, signupprogram, payer, invoice, payment);	
		}		
		return jetPayPayment;
	}
	
	public JetPayPayment savepayment(String paymentId, String jp_request_hash, String orderNumber,
			Account customer, User u, Signup signupprogram, Payer payer, Invoice invoice) {
		
		Payment payment = new Payment();
		payment.setPaymentMode(PaymentTypeEnum.Debit.toString());
		
		JetPayPayment jetPayPayment = savePaymentByOrderNumber(paymentId, orderNumber, customer, u, signupprogram, payer, invoice, payment);
		
		return jetPayPayment;
	}

	private JetPayPayment savePaymentByOrderNumber(String paymentId, String orderNumber, Account customer, User u, Signup signupprogram, Payer payer, Invoice invoice, Payment payment) {
		
		JetPayPayment jetPayPayment = null;
		if(!"".equals(orderNumber)){
			//jetPayPayment = jetPayPaymentDao.getByJpReturnHash(jp_request_hash);
			//jetPayPayment = jetPayPaymentDao.getByOrderNumber("968787959410");
			jetPayPayment = jetPayPaymentDao.getByOrderNumber(orderNumber);			
		}
		if(jetPayPayment!=null){
			
			payment.setPaymentNumber(jetPayPayment.getOrderNumber());
			//payment.setTransactionId(jetPayPayment.getOrderNumber());
			if(jetPayPayment.getActCode() != null && Constants.PAYMENT_ACTION_CODE_SUCCESS.equals(jetPayPayment.getActCode())){
				payment.setStatus(Constants.SUCCESS);
			}else{
				payment.setStatus(Constants.FAILURE);
			}
			//payment.setPaymentNumber(jetPayPayment.getPaymentId().toString());
			/*
			if(cartItems != null && cartItems.get(2) != null && !"".equals(cartItems.get(2).trim())){
        		jetPayPayment.setAmount(Double.parseDouble(cartItems.get(2)));
        		payment.setAmount(Double.parseDouble(cartItems.get(2)));
        	}else{
        		jetPayPayment.setAmount(0D);
        		payment.setAmount(0D);
        	}*/
			//jetPayPayment.setAmount(payer.getAmount());
			if(invoice != null){
				payment.setAmount(invoice.getAmount());
			}
						
			payment.setCustomer(customer);
			payment.setSignup(signupprogram);
			payment.setContact(u);
			payment.setType(PaymentTypeEnum.Debit.toString());
			if(Long.parseLong(paymentId)>0){
				List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentMethodByPaymentId(Long.parseLong(paymentId));
				PaymentMethod paymentMethod = lstPaymentMethod.get(0);
				payment.setPaymentMethod(paymentMethod.getPaymentId().toString());
			}
			payment.setDescription(jetPayPayment.getResponseText());
			payment.setPaymentDate(new Date());
			payment.setPayer(payer);
			payment.setInvoice(invoice);
			Calendar cal = Calendar.getInstance();
			payment.setLastUpdated(cal);
			//payment.setPaymentMode(PaymentTypeEnum.Debit.toString());
			paymentDao.save(payment);
		}
		return jetPayPayment;
	}
	
	private void savePaymentByCash(Account customer, User u, Signup signupprogram, Payer payer, Invoice invoice, Payment payment) {
		payment.setStatus(Constants.SUCCESS);
		if(signupprogram != null && !StringUtils.isBlank(signupprogram.getFinalAmount())){
			payment.setAmount(Double.parseDouble(signupprogram.getFinalAmount()));
		}
					
		payment.setCustomer(customer);
		payment.setSignup(signupprogram);
		payment.setContact(u);
		payment.setType(PaymentTypeEnum.Debit.toString());
		
		//payment.setDescription(jetPayPayment.getResponseText());
		payment.setPaymentDate(new Date());
		payment.setPayer(payer);
		payment.setInvoice(invoice);
		Calendar cal = Calendar.getInstance();
		payment.setLastUpdated(cal);
		//payment.setPaymentMode(PaymentTypeEnum.Debit.toString());
		paymentDao.save(payment);		
		//return jetPayPayment;
	}
	
	private void savePaymentByCheck(Account customer, User u, Signup signupprogram, Payer payer, Invoice invoice, Payment payment) {
		payment.setStatus(Constants.SUCCESS);
		if(signupprogram != null && !StringUtils.isBlank(signupprogram.getFinalAmount())){
			payment.setAmount(Double.parseDouble(signupprogram.getFinalAmount()));
		}
					
		payment.setCustomer(customer);
		payment.setSignup(signupprogram);
		payment.setContact(u);
		payment.setType(PaymentTypeEnum.Debit.toString());
		
		payment.setDescription(customer.getPaymentDesc());
		payment.setPaymentNumber(customer.getCheckNumber());
		payment.setPaymentDate(new Date());
		payment.setPayer(payer);
		payment.setInvoice(invoice);
		Calendar cal = Calendar.getInstance();
		payment.setLastUpdated(cal);		
		paymentDao.save(payment);				
	}
	
	public JetPayPayment savePastDuePayment(String paymentId,
			String jp_request_hash, String orderNumber, Account customer,
			User contact, String paymentMode,
			List<Invoice> requiredPastInvoiceList) {
		//System.out.println("savePastDuePayment -->> " + paymentId		+ " orderNumber -->> " + orderNumber);
		JetPayPayment jetPayPayment = null;
		if (!"".equals(orderNumber)) {
			//jetPayPayment = jetPayPaymentDao.getByOrderNumber("901493230249");
			jetPayPayment = jetPayPaymentDao.getByOrderNumber(orderNumber);
		}
		if (jetPayPayment != null) {

			for (Invoice invoice : requiredPastInvoiceList) {
				Payment payment = new Payment();

				if (jetPayPayment.getActCode() != null
						&& Constants.PAYMENT_ACTION_CODE_SUCCESS
								.equals(jetPayPayment.getActCode())) {
					payment.setStatus(Constants.SUCCESS);
				} else {
					payment.setStatus(Constants.FAILURE);
				}

				payment.setPaymentNumber(jetPayPayment.getPaymentId()
						.toString());

				jetPayPayment.setAmount(0D);
				payment.setCustomer(customer);
				payment.setContact(contact);

				payment.setType(PaymentTypeEnum.Debit.toString());

				payment.setPaymentMode(paymentMode);

				if (Long.parseLong(paymentId) > 0) {

					List<PaymentMethod> lstPaymentMethod = paymentMethodDao
							.getPaymentMethodByPaymentId(Long
									.parseLong(paymentId));
					PaymentMethod paymentMethod = lstPaymentMethod.get(0);
					payment.setPaymentMethod(paymentMethod.getPaymentId()
							.toString());

				}
				payment.setDescription(jetPayPayment.getResponseText());

				payment.setPaymentDate(new Date());
				System.out
						.println(" invoice.getBalance() in paymentservice-- >>"
								+ invoice.getBalance());

				payment.setAmount(invoice.getBalance());
				payment.setSignup(invoice.getSignup());
				payment.setInvoice(invoice);
				payment.setLastUpdated(Calendar.getInstance());
				paymentDao.save(payment);

			}

		}

		return jetPayPayment;
	}

	public JetPayPayment savePastDuePayment(String paymentId,
			String jp_request_hash, String orderNumber, Account customer,
			User contact, String paymentMode,
			List<Invoice> requiredPastInvoiceList,
			List<Invoice> requiredInvoiceList) {
		//System.out.println("savePastDuePayment -->> " + paymentId 	+ "orderNumber -->> " + orderNumber);
		JetPayPayment jetPayPayment = null;
		if (!"".equals(orderNumber)) {

			jetPayPayment = jetPayPaymentDao.getByOrderNumber(orderNumber);
			//jetPayPayment = jetPayPaymentDao.getByOrderNumber("901493230249");
		}
		if (jetPayPayment != null) {

			for (Invoice invoice : requiredPastInvoiceList) {
				Payment payment = new Payment();

				if (jetPayPayment.getActCode() != null
						&& Constants.PAYMENT_ACTION_CODE_SUCCESS
								.equals(jetPayPayment.getActCode())) {
					payment.setStatus(Constants.SUCCESS);
				} else {
					payment.setStatus(Constants.FAILURE);
				}

				payment.setPaymentNumber(jetPayPayment.getPaymentId()
						.toString());

				jetPayPayment.setAmount(0D);

				payment.setCustomer(customer);
				payment.setContact(contact);
				payment.setType(PaymentTypeEnum.Debit.toString());
				payment.setPaymentMode(paymentMode);
				if (Long.parseLong(paymentId) > 0) {
					List<PaymentMethod> lstPaymentMethod = paymentMethodDao
							.getPaymentMethodByPaymentId(Long
									.parseLong(paymentId));
					PaymentMethod paymentMethod = lstPaymentMethod.get(0);
					payment.setPaymentMethod(paymentMethod.getPaymentId().toString());
				}
				payment.setDescription(jetPayPayment.getResponseText());
				payment.setPaymentDate(new Date());
				System.out.println(" invoice.getBalance() in paymentservice-- >> "+ invoice.getBalance());
				payment.setAmount(invoice.getBalance());
				payment.setSignup(invoice.getSignup());
				payment.setInvoice(invoice);
				payment.setLastUpdated(Calendar.getInstance());
				paymentDao.save(payment);
			}

			for (Invoice invoice : requiredInvoiceList) {
				Payment payment = new Payment();

				if (jetPayPayment.getActCode() != null
						&& Constants.PAYMENT_ACTION_CODE_SUCCESS.equals(jetPayPayment.getActCode())) {
					payment.setStatus(Constants.SUCCESS);
				} else {
					payment.setStatus(Constants.FAILURE);
				}
				payment.setPaymentNumber(jetPayPayment.getPaymentId().toString());
				jetPayPayment.setAmount(0D);
				payment.setCustomer(customer);
				payment.setContact(contact);
				payment.setType(PaymentTypeEnum.Debit.toString());
				payment.setPaymentMode(paymentMode);
				if (Long.parseLong(paymentId) > 0) {
					List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentMethodByPaymentId(Long.parseLong(paymentId));
					PaymentMethod paymentMethod = lstPaymentMethod.get(0);
					payment.setPaymentMethod(paymentMethod.getPaymentId().toString());
				}
				payment.setDescription(jetPayPayment.getResponseText());
				payment.setPaymentDate(new Date());
				System.out.println(" invoice.getBalance() in paymentservice-- >> "+ invoice.getBalance());
				payment.setAmount(invoice.getBalance());
				payment.setSignup(invoice.getSignup());
				payment.setInvoice(invoice);
				payment.setLastUpdated(Calendar.getInstance());
				paymentDao.save(payment);

			}
		}

		return jetPayPayment;
	}
	
	public boolean invoiceExits(Long signupId, Long payerId) {
		List<Invoice> invoiceList =invoiceDao.getBySignupPayer(signupId, payerId);
		if (invoiceList != null) {
			if (invoiceList.size() >0) {
				return true;
			}
		}
		return false;
		
	}
	
	public void saveSignupAssociatedOtherContacts(Signup signup, JSONObject cartItemMap) {

		Object emgContactObj = cartItemMap.get("emgContact");
		Object authContactsObj = cartItemMap.get("authContacts");
		if(emgContactObj != null && !emgContactObj.toString().equals("") && !emgContactObj.toString().equals("undefined")){
			AssociatedOtherContacts associatedEmgContact = new AssociatedOtherContacts();
			associatedEmgContact.setSignupId(signup.getSignupId());
			associatedEmgContact.setRole(Constants.ASSOCIATED_OTHER_CONTACTS_ROLE_Emergency_Contact);
			associatedEmgContact.setStatus(Constants.ACTIVE);
			associatedEmgContact.setContactId(Long.parseLong(emgContactObj.toString()));
			associatedOtherContactsDao.save(associatedEmgContact);
		}
		
		if(authContactsObj != null && !authContactsObj.toString().equals("") && !authContactsObj.toString().equals("undefined")){
			String authContactsStr = authContactsObj.toString();
			if(authContactsStr != null && !authContactsStr.equals("")){
				String authContacts[] = authContactsStr.split(";");
				if(authContacts.length > 0){
					for (int i = 0; i < authContacts.length; i++) {
						String authContact = authContacts[i];
						AssociatedOtherContacts associatedAuthContact = new AssociatedOtherContacts();
						associatedAuthContact.setSignupId(signup.getSignupId());
						associatedAuthContact.setRole(Constants.ASSOCIATED_OTHER_CONTACTS_ROLE_Authorized_Pick_Up);
						associatedAuthContact.setStatus(Constants.ACTIVE);
						associatedAuthContact.setContactId(Long.parseLong(authContact));
						associatedOtherContactsDao.save(associatedAuthContact);
					}
				}
			}
		}
	}
	
	public void initialRefund(Double reimbursedAmount, Payment p) {
		Payment refundPayment = new Payment();
		refundPayment.setPaymentMode(p.getPaymentMode());
		refundPayment.setTransactionId(p.getTransactionId());
		refundPayment.setContact(p.getContact());
		refundPayment.setCustomer(p.getCustomer());
		refundPayment.setSignup(p.getSignup());
		refundPayment.setInvoice(p.getInvoice());
		refundPayment.setStatus(Constants.INPROGRESS);
		refundPayment.setType(Constants.CREDITMEMOREFUND);
		refundPayment.setAmount(reimbursedAmount);
		refundPayment.setPaymentDate(new Date());
		refundPayment.setPayer(p.getPayer());
		
		Calendar cal = Calendar.getInstance();
		refundPayment.setLastUpdated(cal);
		paymentDao.save(refundPayment);
	}
}
