package com.ymca.web.controller;

import java.io.Serializable;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSON;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ymca.dao.AccountDao;
import com.ymca.dao.UserDao;
import com.ymca.model.AccountContact;
import com.ymca.model.User;
import com.ymca.web.service.ContactService;

@Controller
@Scope("session")
public class YAgentConsoleController extends BaseController  implements Serializable {
	
	@Resource
	private AccountDao accountDao;

	@Resource
	private UserDao userDao;

	@Resource
	private ContactService contactService;

	@Resource
	private UserDetailsService userDetailsService;

	private String agentUid ;
	
	private String sso ;
	
	public String getAgentUid() {
		return agentUid;
	}

	public void setAgentUid(String agentUid) {
		this.agentUid = agentUid;
	}

	public String getSso() {
		return sso;
	}

	public void setSso(String sso) {
		this.sso = sso;
	}

	@Autowired
	 private ServletContext context; 
	
	// @Resource
	// private UserCache userCache ;

	@RequestMapping(value = "/admin/YAgentConsole", method = RequestMethod.GET)
	public String yAgentConsole(String agentUid,String sso) {
		this.agentUid = agentUid;
		this.sso = sso;		
		return "YAgentConsole";
	}

	@RequestMapping(value = "/admin/getUsersBySearchCriteria", method = RequestMethod.GET)
	public @ResponseBody String getUsersBySearchCriteria(String fName,String lName,String eMail,final HttpServletRequest request, final HttpServletResponse response) {
		JSONArray json = new JSONArray();
		try {
			log.info(" agent id " + agentUid + " , sso " + sso);
			
			List<Object[]> customerList = contactService.getAccountDetails(fName, lName, eMail);

			for (Object object : customerList) {
				AccountContact user = (AccountContact) object;
				JSONObject obj = new JSONObject();
				obj.put("customerId", user.getCustomer().getAccountId());
				obj.put("customerName", user.getCustomer().getName());
				obj.put("PersonFirstName", user.getContact().getFirstName());
				obj.put("PersonLastName", user.getContact().getLastName());
				obj.put("EmailAddress", user.getContact().getEmailAddress());
				obj.put("FormattedPhoneNumber", user.getContact().getFormattedPhoneNumber());
				
				if (user.getContact().getDateOfBirth() != null) obj.put("DateOfBirth", user.getContact().getDateOfBirth().toString());
				json.add(obj);
			}
		} catch (Exception se) {
			log.error("Error while fetching the data ",se);
			
		}
		return json.toString();
	}

	@RequestMapping(value = "/admin/YAgentConsoleContactSearch", method = RequestMethod.GET)
	public String getAccount(@RequestParam(value = "customerId") String customerId,	final HttpServletRequest request, final HttpServletResponse response) {
		log.info(" agent id " + agentUid + " , sso " + sso);
		// logout current user
		String redirectUrl = "redirect:/admin/autologin?agentUid="+agentUid+"&sso="+sso +"&customerId=" +customerId ;
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null) {
			new SecurityContextLogoutHandler().logout(request, response, auth);
			SecurityContextHolder.getContext().setAuthentication(null);
		}
		return redirectUrl;
	}
	
	@RequestMapping(value = "/admin/autologin", method = RequestMethod.GET)
	public String autologin(String agentUid,String sso,Long customerId,HttpServletRequest request) {
		log.info(" agent id " + agentUid + " , sso " + sso);
		// auto login new user
		User user = contactService.getPrimaryUserByCustomerId(customerId);
		UserDetails userDetails = userDetailsService.loadUserByUsername(user.getEmailAddress());
		SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(userDetails.getUsername(), userDetails.getPassword()));

		this.agentUid = agentUid ;
		this.sso = sso ;
		request.getSession().setAttribute("agentUid", agentUid);
		String url = "redirect:/home?agentUid="+agentUid;
		url = "forward:/admin/impersonate/user";
		return url;
	}
	
	@RequestMapping(value = "/admin/impersonate/user", method = RequestMethod.GET)
	public String impersonateUser() {
		String url = "impersoanteUser";
		return url;
	}
}
