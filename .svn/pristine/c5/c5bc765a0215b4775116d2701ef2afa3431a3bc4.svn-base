package com.ymca.web.controller;

import java.io.StringBufferInputStream;
import java.io.StringReader;
import java.util.Calendar;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.InputStreamRequestEntity;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

import com.ymca.dao.ItemDetailDao;
import com.ymca.dao.JetPayPaymentDao;
import com.ymca.dao.VolunteerActivityDao;
import com.ymca.model.Account;
import com.ymca.model.ItemDetail;
import com.ymca.model.JetPayPayment;
import com.ymca.model.User;
import com.ymca.model.VolunteerActivity;
import com.ymca.web.enums.JetpayTransactionTypeEnum;
import com.ymca.web.service.PaymentService;
import com.ymca.web.util.Constants;

@Controller
public class BaseController {
	
	@Resource
	private VolunteerActivityDao volunteerActivityDao;
	
	@Resource
	private JetPayPaymentDao jetPayPaymentDao;
	
	@Resource
	private ItemDetailDao itemDetailDao;

	@Autowired
	protected HttpServletRequest request;
	
	public static Logger log = LoggerFactory.getLogger(PaymentService.class);
	
	protected User getUserByAccount(Account account, User user) {
		if(account !=null && account.getUser() != null && account.getUser().size()>0){
			if(account.getUser().size()==1){
				for(User u: account.getUser()){
					user = u;
				}
			}
			else{
				boolean primaryUserFound = false;
				for(User u: account.getUser()){
					if(u.isPrimary()){
						primaryUserFound = true;
						user = u;
						break;
					}
				}
				if(user==null && !primaryUserFound){
					user = account.getUser().iterator().next();
				}
			}
		}
		return user;
	}
	
	protected List<VolunteerActivity> getVolunteerActivity() {
		return volunteerActivityDao.findAll();
	}
	
	protected Long convertNullToZero(Long val){
		if(val==null)
			 val = 0L;
		
		return val;
	}
	
	protected JetPayPayment processACHjetPayTransaction(String token,
			String totalAmount, String checkNumber, String cardName) {
		String totalAmountStr = "0";
		if(StringUtils.isNotBlank(totalAmount)){
			try{
				totalAmountStr = String.valueOf(Integer.parseInt(totalAmount) * 100);
			}catch(Exception e){
				totalAmountStr = totalAmount;
				log.error("Error Occured while parcing the amount in processACHjetPayTransaction >> ", e); 
			}
		}
		// New ACH Transaction
		PostMethod post = new PostMethod(Constants.JETPAY_XML_SCHEMA_URL);    

		StringBuffer inputXMLStrBuffer = new StringBuffer("<JetPay>");
		inputXMLStrBuffer.append("<TransactionID>"+RandomStringUtils.randomAlphanumeric(18)+"</TransactionID>");
		inputXMLStrBuffer.append("<TransactionType>"+ JetpayTransactionTypeEnum.CHECK +"</TransactionType>");
		inputXMLStrBuffer.append("<TerminalID>"+ Constants.JETPAY_TERMINAL_ID +"</TerminalID>");
		inputXMLStrBuffer.append("<Origin> INTERNET </Origin>");
		inputXMLStrBuffer.append("<TotalAmount> "+ totalAmountStr +" </TotalAmount>");
		//inputXMLStrBuffer.append("<FeeAmount>100</FeeAmount>");
		inputXMLStrBuffer.append("<CardName> " + cardName +" </CardName>");
		inputXMLStrBuffer.append("<Token> " +token+ "</Token>");
		inputXMLStrBuffer.append("<ACH>");
		inputXMLStrBuffer.append("<CheckNumber> "+ checkNumber +" </CheckNumber>");
		inputXMLStrBuffer.append("</ACH>");
		inputXMLStrBuffer.append("</JetPay>");
		post.setRequestEntity(new InputStreamRequestEntity(new StringBufferInputStream(inputXMLStrBuffer.toString())));
		post.setRequestHeader("Content-type", "text/xml; charset=ISO-8859-1");

		// Get HTTP client
		HttpClient httpclient = new HttpClient();

		// Execute request
		JetPayPayment jetPayPayment =  new JetPayPayment();
		try {

			int result = httpclient.executeMethod(post);

			// Display status code
			//System.out.println("Response status code: " + result);

			// Display response
			//System.out.println("Response body: ");
			//System.out.println(post.getResponseBodyAsString());
			
			String xml = post.getResponseBodyAsString();           
			InputSource source = new InputSource(new StringReader(xml));

			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			Document document = db.parse(source);

			XPathFactory xpathFactory = XPathFactory.newInstance();
			XPath xpath = xpathFactory.newXPath();

			jetPayPayment.setTransId(xpath.evaluate("/JetPayResponse/TransactionID", document));
			jetPayPayment.setOrderNumber(xpath.evaluate("/JetPayResponse/TransactionID", document));
            jetPayPayment.setActCode(xpath.evaluate("/JetPayResponse/ActionCode", document));
            jetPayPayment.setResponseText(xpath.evaluate("/JetPayResponse/ResponseText", document));
            
            jetPayPayment.setAmount(Double.parseDouble(totalAmount));
            jetPayPaymentDao.save(jetPayPayment);
            
		} catch(Exception e){
			log.error("Errror while processing ACH JeyPay ",e);
			
		} finally {
			post.releaseConnection();
		}
		
		return jetPayPayment;
	}	
	
	protected JetPayPayment processCCjetPayTransaction(String token, String totalAmount) {
		String totalAmountStr = "0";
		if(StringUtils.isNotBlank(totalAmount)){
			try{
				totalAmountStr = String.valueOf(Integer.parseInt(totalAmount) * 100);
			}catch(Exception e){
				totalAmountStr = totalAmount;
				log.error("Error Occured while parcing the amount in processCCjetPayTransaction >> ", e); 
			}
		}
		// Prepare HTTP post
	    PostMethod post = new PostMethod(Constants.JETPAY_XML_SCHEMA_URL);	    
	    StringBuffer inputXMLStrBuffer = new StringBuffer("<JetPay>");
	    inputXMLStrBuffer.append("<TransactionID>"+RandomStringUtils.randomAlphanumeric(18)+"</TransactionID>");	
	    inputXMLStrBuffer.append("<TransactionType>"+JetpayTransactionTypeEnum.SALE+"</TransactionType>");       
	    inputXMLStrBuffer.append("<Token>"+token+"</Token>");
	    inputXMLStrBuffer.append("<TotalAmount>"+totalAmountStr+"</TotalAmount>");
	    inputXMLStrBuffer.append("<TerminalID>"+ Constants.JETPAY_TERMINAL_ID +"</TerminalID>");
	    inputXMLStrBuffer.append("</JetPay>");	    
	    post.setRequestEntity(new InputStreamRequestEntity(new StringBufferInputStream(inputXMLStrBuffer.toString())));
	    post.setRequestHeader("Content-type", "text/xml; charset=ISO-8859-1");
	    // Get HTTP client
	    HttpClient httpclient = new HttpClient();
	    // Execute request
	    JetPayPayment jetPayPayment =  new JetPayPayment();
	    try {
	    	httpclient.executeMethod(post);
	        String xml = post.getResponseBodyAsString();  
	        if(xml != null){
	        	
            InputSource source = new InputSource(new StringReader(xml));

            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document document = db.parse(source);

            XPathFactory xpathFactory = XPathFactory.newInstance();
            XPath xpath = xpathFactory.newXPath();  
            
            jetPayPayment.setTransId(xpath.evaluate("/JetPayResponse/TransactionID", document));
            jetPayPayment.setOrderNumber(xpath.evaluate("/JetPayResponse/TransactionID", document));
            jetPayPayment.setActCode(xpath.evaluate("/JetPayResponse/ActionCode", document));
            jetPayPayment.setResponseText(xpath.evaluate("/JetPayResponse/ResponseText", document));
            jetPayPayment.setAmount(Double.parseDouble(totalAmount));
            jetPayPaymentDao.save(jetPayPayment);
	        }
	    } catch(Exception e){
	    	log.error("Error  ",e);
	    	
	    } finally {
	        post.releaseConnection();
	    }
		return jetPayPayment;
	}
	
	protected synchronized void updateCapacity(ItemDetail itemDetail, Integer noOfTickets) {
		if(itemDetail!=null && noOfTickets!=null){
			Long remainingCapacity = convertNullToZero(itemDetail.getRemainingCapacity());
			Long actualRemainingCapacity = convertNullToZero(itemDetail.getActualRemainingCapacity());
			Long waitListCounter = convertNullToZero(itemDetail.getWaitlistCounter());
			
			if(remainingCapacity.compareTo(0L)<=0 || remainingCapacity < noOfTickets){
				//remaining capacity is less than 0
				waitListCounter = waitListCounter+1;
			}
			else{
				// remaining capacity is greater than 0
				remainingCapacity = remainingCapacity-noOfTickets;
				actualRemainingCapacity = actualRemainingCapacity-noOfTickets;
			}
			
			itemDetail.setRemainingCapacity(remainingCapacity);
			itemDetail.setActualRemainingCapacity(actualRemainingCapacity);
			itemDetail.setWaitlistCounter(waitListCounter);
			
			populateAndSaveItemDetail(itemDetail);
		}
	}
	
	protected ItemDetail populateAndSaveItemDetail(ItemDetail itemDetail){
		
		ItemDetail ids = new ItemDetail();
		ids.setId(itemDetail.getId());
		ids.setRemainingCapacity(itemDetail.getRemainingCapacity());
		ids.setActualRemainingCapacity(itemDetail.getActualRemainingCapacity());
		ids.setWaitlistCounter(itemDetail.getWaitlistCounter());
		Calendar cal = Calendar.getInstance();
		ids.setLastUpdated(cal);
		itemDetailDao.save(itemDetail);
		
		return ids;
	}
	
	protected void setAgentUidInSession() {
		try {
			String agentUid = request.getParameter("agentUid") ;
			if (StringUtils.isNotBlank(agentUid)) {
				request.getSession().setAttribute("agentUid", request.getParameter("agentUid"));	
			}
		} catch (Exception e) {
			log.error(" Error while setting agent uid in session",e);
		}
	}
	
	protected String getPortalLastModifiedBy() {
		String portalLastModifiedBy = null;
		try {
			String agentUid = (String) request.getSession().getAttribute("agentUid");
			if (StringUtils.isNotBlank(agentUid)) {
				Authentication a = SecurityContextHolder.getContext().getAuthentication();
				//portalLastModifiedBy = ((UserDetails) a.getPrincipal()).getUsername();
				portalLastModifiedBy = a.getName();
				portalLastModifiedBy = agentUid;
			}
			log.info(" Portal modified by " + portalLastModifiedBy);
		} catch (Exception e) {
			log.error(" Error while getting portal last modified by",e);
		}
		return portalLastModifiedBy;
	}

	public HttpServletRequest getRequest() {
		return request;
	}

	public void setRequest(HttpServletRequest request) {
		this.request = request;
	}
}
