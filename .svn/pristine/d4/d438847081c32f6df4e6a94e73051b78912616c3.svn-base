package com.ymca.web.controller;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ymca.dao.AccountDao;

import com.ymca.dao.InteractionDao;
import com.ymca.dao.ItemDaysDao;
import com.ymca.dao.ItemDetailsDao;
import com.ymca.dao.JetPayPaymentDao;
import com.ymca.dao.LocationDao;
import com.ymca.dao.PaymentDao;
import com.ymca.dao.PaymentMethodDao;
import com.ymca.dao.PricingRuleDao;
import com.ymca.dao.PromocodeDao;
import com.ymca.dao.SignupDao;
import com.ymca.dao.SystemPropertyDao;
import com.ymca.dao.TandCDao;
import com.ymca.dao.UserDao;
import com.ymca.model.Account;
import com.ymca.model.ItemDetails;

import com.ymca.model.Interaction;
import com.ymca.model.ItemDays;
import com.ymca.model.ItemDetailsSession;
import com.ymca.model.ItemPromoDetails;
import com.ymca.model.JetPayPayment;
import com.ymca.model.Locations;
import com.ymca.model.Payment;
import com.ymca.model.PaymentMethod;
import com.ymca.model.PricingRule;
import com.ymca.model.Product;
import com.ymca.model.Promocode;
import com.ymca.model.Signup;
import com.ymca.model.TandC;
import com.ymca.model.User;
import com.ymca.web.enums.ProductTypeEnum;
import com.ymca.web.service.PaymentService;
import com.ymca.web.service.UserService;
import com.ymca.web.util.Constants;

@Controller
public class ProgramController extends BaseController {
	
	@Autowired
    private UserService userService;
	
	@Resource
	private AccountDao accountDao;
	
	@Resource
	private LocationDao locationDao;
	
	@Resource
	private SignupDao signupDao;
	
	@Resource
	private PaymentMethodDao paymentMethodDao;
	
	@Resource
	private PromocodeDao promocodeDao;
	
	@Resource
	private UserDao userDao;
	
	@Resource
	private SystemPropertyDao systemPropertyDao;
	
	@Resource
	private PricingRuleDao pricingRuleDao;
	
	@Resource
	private JetPayPaymentDao jetPayPaymentDao;
	
	@Resource
	private PaymentDao paymentDao;
	
	@Resource
	private ItemDetailsDao itemDetailsDao;
	
	@Resource
	private ItemDaysDao itemDaysDao;
	
	@Resource
	private InteractionDao interactionDao;
	
	@Resource
	private TandCDao tandCDao;
	
	@Autowired
    protected AuthenticationManager authenticationManager;
	
	@Resource
	private PaymentService paymentService;
	
	@RequestMapping(value="/addprogramtocart", method=RequestMethod.GET)
    public ModelAndView addprogramtocart(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
		
		/*
		HashMap programsLbl = new HashMap<String, String>();
		for(SystemProperty sysprop : systemPropertyDao.getPropertyByPageName(Constants.PROGRAM_PAGENAME_LABEL)){
			programsLbl.put(sysprop.getKeyName(), sysprop.getKeyValue());
		}*/
		
		model.addAttribute("productcategories", itemDetailsDao.getItemsCategoriesByItemType(ProductTypeEnum.Program.toString()));
		//model.addAttribute("programlabels", programsLbl);
        model.addAttribute("locations", locationDao.findAll());
        
        // check if user is logged in
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			//model.addAttribute("errMsg", "Your session is expired");
			//return new ModelAndView("login", model.asMap());
			//System.out.println(e);
		}
		
		Account account = null;
    	User user =  null;	
    	List<PaymentMethod> paymentList = null;
    	if(userId != null && !"".equals(userId)){
	    	account = accountDao.getByEmail(userId);
			request.setAttribute("userId", userId);				
			user = getUserByAccount(account, user);
			paymentList = account.getPaymentMethod();
    	}
    	
    	if(account != null){	    		    	    	
	        model.addAttribute("accInfo", account);
	        model.addAttribute("usInfo", user);	
	        
	        int userCount = account.getUser().size();
	        List<User> userS = new ArrayList<User>();
	        int countmembers = 0;
	        if(userCount>1){
		        for(User u: account.getUser()){
		        	if(!user.getUsername().equalsIgnoreCase(u.getUsername()) && u.isActive()){
		        		countmembers = countmembers + 1;
		        		userS.add(u);
		        	}
		        }
			}
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("userS", userS);
	        model.addAttribute("AlluserS", account.getUser());
	        
	        model.addAttribute("paymentInfoLst" , paymentList);	     
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("gottocontact", "true");
    	}
    	else {
			//model.addAttribute("errMsg", "Please Login");
			//return new ModelAndView("login", model.asMap());
    		return new ModelAndView("loginpop", model.asMap());
    		
		}	
		return new ModelAndView("programRegistration", model.asMap());
	}
	
	@RequestMapping(value="/programRegistration", method=RequestMethod.GET)
    public ModelAndView programRegistration(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
		
		model.addAttribute("productcategories", itemDetailsDao.getItemsCategoriesByItemType(ProductTypeEnum.Program.toString()));
        model.addAttribute("locations", locationDao.findAll());
        
        // check if user is logged in
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			//model.addAttribute("errMsg", "Your session is expired");
			//return new ModelAndView("login", model.asMap());
		}
		
		Account account = null;
    	User user =  null;	
    	List<PaymentMethod> paymentList = null;
    	if(userId != null && !"".equals(userId)){
	    	account = accountDao.getByEmail(userId);
			request.setAttribute("userId", userId);				
			user = getUserByAccount(account, user);
			paymentList = account.getPaymentMethod();
    	}
    	
    	if(account != null){	    		    	    	
	        model.addAttribute("accInfo", account);
	        model.addAttribute("usInfo", user);	
	        
	        int userCount = account.getUser().size();
	        List<User> userS = new ArrayList<User>();
	        int countmembers = 0;
	        if(userCount>1){
		        for(User u: account.getUser()){
		        	if(!user.getUsername().equalsIgnoreCase(u.getUsername()) && u.isActive()){
		        		countmembers = countmembers + 1;
		        		userS.add(u);
		        	}
		        }
			}
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("userS", userS);
	        model.addAttribute("AlluserS", account.getUser());
	        
	        model.addAttribute("paymentInfoLst" , paymentList);	     
	        model.addAttribute("gottocontact", "false");
	        
    	}/*
    	else {
			model.addAttribute("errMsg", "Please Login");
			return new ModelAndView("login", model.asMap());
			
		}	*/	
		return new ModelAndView("programRegistration", model.asMap());
    }
	
	// Not in use
	/*
	@RequestMapping(value="/getItemSessionDetails", method=RequestMethod.GET)
    public @ResponseBody List<ItemDetailsSession>  getItemSessionDetails(@RequestParam String location, @RequestParam String category, @RequestParam String productname, final HttpServletRequest request, final HttpServletResponse response) { 	
		
		List<ItemDetailsSession> nullitems = new ArrayList<ItemDetailsSession>();
		DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
		DateFormat inputsdf = new SimpleDateFormat("M/d/yyyy");  
		DateFormat inputmonthsdf = new SimpleDateFormat("MMM yyyy");  
		//String locationId = request.getParameter("location");
		//String category = request.getParameter("category");
		//String productname = request.getParameter("productname");
		String dayview = request.getParameter("dayview");
		String dateormonth = request.getParameter("dateormonth");
		
		Locations locations = new Locations();
		Long locId = Long.parseLong(location);
		locations.setLocationId(locId);
		
		Date startDate;
        Date endDate;
        
		if(dayview.equalsIgnoreCase("MONTH")){
			Calendar c = Calendar.getInstance();
			try {
				c.setTime(inputmonthsdf.parse(dateormonth));
				
			} catch (ParseException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return nullitems;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return nullitems;
			}
			
			   // this takes current date
			
		    c.set(Calendar.DAY_OF_MONTH, 1);
		    Date firstDateofMonth = c.getTime(); 
		    
		    //Date today = new Date();  
	        //Calendar calendar = Calendar.getInstance();  
	        //calendar.setTime(today);  
	
	        c.add(Calendar.MONTH, 1);  
	        //c.set(Calendar.DAY_OF_MONTH, 1);  
	        c.add(Calendar.DATE, -1);  
	        Date lastDateOfMonth = c.getTime(); 
        
			try {
				startDate = sdf.parse(sdf.format(firstDateofMonth));
				endDate = sdf.parse(sdf.format(lastDateOfMonth));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return nullitems;
			}
		}
		else{
			try {
				if("".equals(dateormonth.trim())){
					dateormonth = inputsdf.format(new Date());
				}
				startDate = sdf.parse(sdf.format(inputsdf.parse(dateormonth)));
				
				Calendar cal = Calendar.getInstance();
				cal.setTime(inputsdf.parse(dateormonth));
				cal.add(Calendar.MONTH, 1);  
		        cal.set(Calendar.DAY_OF_MONTH, 1);  
		        cal.add(Calendar.DATE, -1);  
		        Date lastDateOfMonth = cal.getTime(); 
		        
		        endDate = sdf.parse(sdf.format(lastDateOfMonth));
				//endDate = sdf.parse(sdf.format(inputsdf.parse(dateormonth)));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return nullitems;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return nullitems;
			}
			
		}
		
		try {
			List<ItemDetailsSession> itemDetailsSession = null;
			if("".equals(productname.trim())){
				itemDetailsSession = productDao.getMembershipProgramSession(startDate,endDate,category,locations);
			} else {
				itemDetailsSession = productDao.getMembershipProgramSession(startDate,endDate,category,productname,locations);
			}
			//System.out.println(itemDetailsSession.size());
			if(itemDetailsSession.size()==0){
				return nullitems;
			}
			return itemDetailsSession;
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			//e1.printStackTrace();
			return nullitems;
		}
		
	}
	*/
	
	@PersistenceContext
	public EntityManager em; 
	
	@RequestMapping(value="/getProgramDetails", method=RequestMethod.GET)
    public @ResponseBody String  getProgramDetails(@RequestParam String location, @RequestParam String category, @RequestParam String productname, final HttpServletRequest request, final HttpServletResponse response) { 	
		
		DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
		DateFormat inputsdf = new SimpleDateFormat("M/d/yyyy");  
		DateFormat inputmonthsdf = new SimpleDateFormat("MMM yyyy");  

		String datestart = request.getParameter("datestart");
		String dateend = request.getParameter("dateend");
		
		Locations locations = new Locations();
		Long locId = Long.parseLong(location);
		locations.setLocationId(locId);
		
		Date startDate;
        Date endDate;
        
		
		try {
			startDate = sdf.parse(sdf.format(inputsdf.parse(datestart)));
	        endDate = sdf.parse(sdf.format(inputsdf.parse(dateend)));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			return null;
		}
		try {
			/*
			List<Object[]> itemDetailsSession = null;
			if("".equals(productname.trim())){
				itemDetailsSession = productDao.getMembershipProgramSession(startDate,endDate,category,locations);
			} else {
				itemDetailsSession = productDao.getMembershipProgramSession(startDate,endDate,category,productname,locations);
			}*/
			
			List<Object[]> itemDetailsObj = getMembershipProgramSession(category,productname, locations, startDate, endDate);
			
			if(itemDetailsObj.size()==0){
				return null;
			}

			JSONArray json = new JSONArray();
			for(Object obj: itemDetailsObj){
				ItemDetails i = (ItemDetails) obj;	
				
				double membertierPrice = 0D;
				double nonmembertierPrice = 0D;
				  
				List<PricingRule> pricingRuleLst =  pricingRuleDao.findByitemDetailsIdAndTier(i.getId(), i.getLocations().getTier());
				for(PricingRule pricingRule: pricingRuleLst) {
					  membertierPrice += Double.parseDouble(pricingRule.getTierPrice());
					  nonmembertierPrice += Double.parseDouble(pricingRule.getNonmemberTierPrice());
				}
				
				
				JSONObject jsonObj = new JSONObject();
				jsonObj.put("id", i.getId());
				jsonObj.put("productId", i.getId());
				jsonObj.put("startDate", i.getStartdate());
				jsonObj.put("endDate", i.getEnddate());
				jsonObj.put("startTime", i.getStarttime());
				jsonObj.put("endTime", i.getEndtime());
				jsonObj.put("capacity", i.getCapacity());
				jsonObj.put("gender", i.getGender());
				jsonObj.put("memberprice", membertierPrice);
				jsonObj.put("nonmembertierPrice", nonmembertierPrice);
				jsonObj.put("productName", i.getItemName());
				jsonObj.put("productDesc", i.getDescription());
				jsonObj.put("productCategory", i.getCategory());
				jsonObj.put("productType", i.getItemType());
				jsonObj.put("branchName", i.getLocations().getBranchName());
				jsonObj.put("tier", i.getLocations().getTier());
				
				String sessionName = "";
			    String instructorName = "";
			    String sessionDays = "";
			    for(ItemDays idys : i.getItemDays()){
			    	sessionName = idys.getSessionName();
			    	instructorName = idys.getInstructorName();
			    	sessionDays = sessionDays + "," + idys.getItemDaysId();
			    }
			    
				jsonObj.put("sessionName", sessionName);
				jsonObj.put("instructorName", instructorName);
				jsonObj.put("dayId", sessionDays);
				
				json.add(jsonObj);
			}
			
			return json.toString();
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			//e1.printStackTrace();
			return null;
		}
		
	}

	private List<Object[]> getMembershipProgramSession(String category,
			String productname, Locations locations, Date startDate,
			Date endDate) {
		
		List<Locations> bayareaLocations = new ArrayList<Locations>();;
		CriteriaBuilder builder = em.getCriteriaBuilder();
		CriteriaQuery<Object[]> query = builder.createQuery(Object[].class);
		//Root<ItemDays> ids = query.from(ItemDays.class);
		//Join<ItemDays, ItemDetails> i = ids.join("itemDetails",JoinType.INNER);
		Root<ItemDetails> i = query.from(ItemDetails.class);
		Join<ItemDetails, Product> p = i.join("product",JoinType.INNER);
		Join<ItemDetails, Locations> l = i.join("locations",JoinType.INNER);

		ParameterExpression<String> prodType = builder.parameter(String.class);
		ParameterExpression<Date> sd = builder.parameter(Date.class);
		ParameterExpression<Date> ed = builder.parameter(Date.class);
		ParameterExpression<String> cat = builder.parameter(String.class);
		ParameterExpression<String> prodName = builder.parameter(String.class);
		ParameterExpression<Locations> loc = builder.parameter(Locations.class);
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		predicates.add(
				builder.and(
					builder.equal(p.get("productType"), prodType),
					builder.greaterThanOrEqualTo(i.<Date>get("startdate"), sd),
					builder.lessThanOrEqualTo(i.<Date>get("startdate"), ed),
					builder.equal(p.get("category"), cat)
				)
		);
		
		
		if(!"".equals(productname.trim())){
			predicates.add(builder.and(builder.like(p.<String>get("productName"), prodName)));
		}
		
		if(locations.getLocationId()==1){}
		else if(locations.getLocationId()==2){
			 bayareaLocations = locationDao.getLocationsByArea(Constants.LOCATION_BAYAREA);
			 Collection<Locations> lstlocations = bayareaLocations;
			 //Expression<Collection<Locations>> lstLocations = lstlocations;
			 Expression<Locations> lstloc = i.get("locations");
			 predicates.add(lstloc.in(lstlocations));
			 
			 
		}
		else {
			predicates.add(builder.and(builder.equal(i.<Locations>get("locations"), loc)));
		}
		query.multiselect(i);
		/*
		query.multiselect("instructorName","sessionName",i.get("starttime"),i.get("endtime"),"itemDaysId",i.get("capacity"),"capacity"
				,i.get("price"),i.get("price"),i.get("startdate"),i.get("enddate")
				,p.get("productId"),p.get("productName"),p.get("description")
				,l.get("branchName"),l.get("tier"),i.get("id")); */
		query.where(predicates.toArray(new Predicate[]{}));

		TypedQuery<Object[]> typequery = em.createQuery(query);
		typequery.setParameter(prodType, Constants.PROGRAM_TYPE);
		typequery.setParameter(sd, startDate);
		typequery.setParameter(ed, endDate);
		typequery.setParameter(cat, category);
		if(!"".equals(productname.trim())){
			typequery.setParameter(prodName, productname.trim()+"%");
		}
		if(locations.getLocationId()==1){}
		else if(locations.getLocationId()==2){
			/*String locat = "3,4";
			typequery.setParameter(lstloc, locat);*/
		}
		else {
			typequery.setParameter(loc, locations);
		}
		
		List<Object[]> lstObj = typequery.getResultList();
		return lstObj;
	}
	
	@RequestMapping(value="/signupProgram", method=RequestMethod.POST)
    public @ResponseBody String  signupProgram(final HttpServletRequest request, final HttpServletResponse response) { 	
		
		String tansId = "";
		String paymentId = request.getParameter("paymentId");
		String jp_request_hash = request.getParameter("jp_request_hash");
		String orderNumber = request.getParameter("orderNumber");
		
		String lstCartItem = request.getParameter("cartItems");
		List<String> lstStrCartItem = Arrays.asList(lstCartItem.split(","));
		
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			return "FAIL";
		}
    	
    	try{
    		Account customer = null;
        	if(userId != null && !"".equals(userId)){
        		customer = accountDao.getByEmail(userId);			
        	}
    		
	    	if(lstStrCartItem.size()>0){
	    		for(String lstcartItems: lstStrCartItem){
	
	    			List<String> cartItems = Arrays.asList(lstcartItems.split("__"));
	 
	    			
	    			//ItemDetailsSession ids = itemDetailsSessionDao.getByItemDetailsSessionId(Long.parseLong(cartItems.get(0)));
	    			String itemDetailId = cartItems.get(0);
	    			ItemDetails itemDetails = itemDetailsDao.getById(Long.parseLong(itemDetailId));;
	    			
	    			//ItemDays ids = itemDaysDao.getByItemDaysIdAndItemDetails(Long.parseLong(itemDaysMapId.get(0)), itemDetails);
	    			User u =  userDao.getByPartyId(Long.parseLong(cartItems.get(1)));
	    			
	    			Signup signupprogram = paymentService.savesignup(paymentId, customer, cartItems, itemDetails, u, ProductTypeEnum.Program);
	    			JetPayPayment jetpay = paymentService.savepayment(paymentId, jp_request_hash, orderNumber, customer, cartItems, u, signupprogram, ProductTypeEnum.Program);
	    			
	    			if(jetpay!=null)
	    				tansId = jetpay.getTransId();
	    		}
	    	}
    	}
    	catch(Exception e){
    		
    		return "FAIL";
    	}
		
		return "SUCCESS__"+tansId;
	}

	/*
	 // Moved to PaymentService
	 private JetPayPayment savepayment(String paymentId, String jp_request_hash,
			Account customer, List<String> cartItems, User u,
			Signup signupprogram) {
		
		JetPayPayment jetPayPayment = null;
		if(!"".equals(jp_request_hash)){
			jetPayPayment = jetPayPaymentDao.getByJpReturnHash(jp_request_hash);
		}
		if(jetPayPayment!=null){
			Payment payment = new Payment();
			payment.setTransactionId(Long.parseLong(jetPayPayment.getTransId()));
			payment.setStatus(Constants.SUCCESS);
			payment.setPaymentNumber(jetPayPayment.getPaymentId().toString());
			payment.setAmount(Double.parseDouble(cartItems.get(2)));
			payment.setCustomer(customer);
			payment.setSignup(signupprogram);
			payment.setContact(u);
			payment.setType(Constants.PROGRAM_TYPE);
			if(Long.parseLong(paymentId)>0){
				List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentMethodByPaymentId(Long.parseLong(paymentId));
				PaymentMethod paymentMethod = lstPaymentMethod.get(0);
				payment.setPaymentMethod(paymentMethod.getPaymentId().toString());
			}
			payment.setPaymentDate(new Date());
			paymentDao.save(payment);
		}
		
		return jetPayPayment;
	}

	private Signup savesignup(String paymentId, Account customer,
			List<String> cartItems, ItemDetailsSession ids, User u) {
		Signup signup = new Signup();
		signup.setCustomer(customer);
		signup.setItemDetailsSession(ids);
		signup.setItem(ids.getItem());
		signup.setProgramStartDate(ids.getItemDetails().getStartdate());
		signup.setProgramEndDate(ids.getItemDetails().getEnddate());
		signup.setFinalAmount(cartItems.get(2));
		
		Long  loc_id = ids.getItemDetails().getLocations().getLocationId();
		signup.setLocation(locationDao.getLocationsByLocationId(loc_id));
		
		signup.setContact(u);
		signup.setContactName(u.getFullName());
		signup.setStatus(Constants.ACTIVE);
		signup.setType("MEMBERSHIP");
		
		if(Long.parseLong(paymentId)>0){
			List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentMethodByPaymentId(Long.parseLong(paymentId));
			PaymentMethod paymentMethod = lstPaymentMethod.get(0);
			signup.setPaymentMethod(paymentMethod);
		}
		
		Signup signupprogram = new Signup();
		signupprogram = signupDao.save(signup);
		return signupprogram;
	}*/
	
	// Not in use
	/*
	@RequestMapping(value="/getcartItems", method=RequestMethod.POST)
    public @ResponseBody List<ItemDetailsSession>  getcartItems(ItemDetailsSession itemDetailsSession, final HttpServletRequest request, final HttpServletResponse response) { 	
		
		String lstSessionId = request.getParameter("selectedItemSession");
		List<String> lstStrSessionId = Arrays.asList(lstSessionId.split(","));
		List<ItemDetailsSession> lstidsOut = new ArrayList<ItemDetailsSession>();
		
		for(String sId: lstStrSessionId){
			ItemDetails itemDetails = new ItemDetails();
			ItemDetailsSession idsOut = new ItemDetailsSession();
			ItemDetailsSession ids =  itemDetailsSessionDao.getByItemDetailsSessionId(Long.parseLong(sId));
			
			Authentication a = SecurityContextHolder.getContext().getAuthentication();
			String userId = null;
			try{
				userId = ((UserDetails) a.getPrincipal()).getUsername();
			}catch(Exception e){
				return null;
			}
			
			Account customer = null;
	    	if(userId != null && !"".equals(userId)){
	    		customer = accountDao.getByEmail(userId);			
	    	}
	    	
	    	
	    	if(customer!=null){
	    		idsOut.setSessionName(ids.getSessionName());
	    		idsOut.setDays(ids.getDays());
	    		idsOut.setStarttime(ids.getStarttime());
	    		idsOut.setEndtime(ids.getEndtime());
	    		
	    		itemDetails.setStartdate(ids.getItemDetails().getStartdate());
	    		itemDetails.setEnddate(ids.getItemDetails().getEnddate());
	    		itemDetails.setPrice(ids.getItemDetails().getPrice());
	    		idsOut.setItemDetails(itemDetails);
	    		
	    		lstidsOut.add(idsOut);
	    	}
		}
		
		return lstidsOut;
	}
	*/
	@RequestMapping(value="/getProductsbyCategory", method=RequestMethod.GET)
    public @ResponseBody List<ItemDetails>  getProductsbyCategory(final HttpServletRequest request, final HttpServletResponse response) { 		
    	try{
    		String strCategory = request.getParameter("category");
    		List<ItemDetails> productLst =  itemDetailsDao.getItemsbyCategories(strCategory);
    		return productLst; 
    		
    	}catch(Exception e){    		
    		      		
    	}
		return null;    	
    }
	
	/*
	@RequestMapping(value="/getItems", method=RequestMethod.GET)
    public @ResponseBody String getItemS(final HttpServletRequest request, final HttpServletResponse response) { 	
		  DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
		  Date todayDate;
		  String today;
		 // Date today = new Date();  
	      Calendar calendar = Calendar.getInstance();  
	      //calendar.setTime(today);  
	      
		  List<Promocode> promo = new ArrayList<Promocode>();
		  List<Product> productLst =  productDao.findAll();
		  
		  try {
			  todayDate = sdf.parse(sdf.format(calendar.getTime()));
			  today = sdf.format(calendar.getTime());

			  promo = promocodeDao.getACPromoDiscountByItemDetailsId();
		  } catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
		  }
		  
		  
		  JSONArray json = new JSONArray();
		  
		  for(Product p: productLst){
		      if(p.getItemDetails()!=null){
		    	  List<ItemDetailsSession> itemSession = p.getItemDetails().getItemDetailsSession();
		    	  if(itemSession.size()>0){
		    		  for(ItemDetailsSession ids : itemSession){
							
						  double membertierPrice = 0D;
						  double nonmembertierPrice = 0D;
						  
						  List<PricingRule> pricingRuleLst =  pricingRuleDao.findByitemDetailsIdAndTier(ids.getItemDetails().getId(), ids.getItemDetails().getLocations().getTier().toString());
						  for(PricingRule pricingRule: pricingRuleLst) {
							  membertierPrice += Double.parseDouble(pricingRule.getTierPrice());
							  nonmembertierPrice += Double.parseDouble(pricingRule.getNonmemberTierPrice());
						  }
		    			  
				    	  JSONObject obj = new JSONObject();
				    	  obj.put("id", ids.getItemDetailsSessionId());
						  obj.put("prodId", ids.getItemDetailsSessionId());
					      obj.put("name", p.getProductName());
				    	  obj.put("memberprice", membertierPrice);
				    	  obj.put("nonmemberprice", nonmembertierPrice);
				    	  obj.put("description", p.getDescription());
					      obj.put("category", p.getCategory());
					      obj.put("sessionName", ids.getSessionName());
					      obj.put("instructor", ids.getInstructorName());
					      obj.put("start_time", ids.getStarttime());
					      obj.put("end_time", ids.getEndtime());
					      obj.put("start_date", ids.getItemDetails().getStartdate());
					      obj.put("end_date", ids.getItemDetails().getEnddate());
					      obj.put("itemDetailsId", ids.getItemDetails().getId());
					      obj.put("itemDetailsSessionId", ids.getItemDetailsSessionId());
					      obj.put("days", ids.getDays());
					      
					      Double memberdiscount = new Double(0);
					      Double nonmemberdiscount = new Double(0);
					      
					      String lblPromoCode = "";
					      if(promo.size()>0){
					    	  for(Promocode pc: promo){
					    		  for(ItemPromoDetails ipd: pc.getItemPromoDetails()){
					    			  if(ipd.getItemDetails().getId().equals(ids.getItemDetails().getId())){
					    				  lblPromoCode = pc.getPromoCode();
					    				  if(pc.getDiscounttype().equalsIgnoreCase(Constants.LABEL_ITEM_DISCOUNT_VALUE)){
					    					  memberdiscount = pc.getDiscountvalue();
					    					  nonmemberdiscount = pc.getDiscountvalue();
					    				  }
					    				  else if(pc.getDiscounttype().equalsIgnoreCase(Constants.LABEL_ITEM_DISCOUNT_PERCENTAGE)){
					    					  BigDecimal memberdiscountAmount = pc.getDiscountpercentage().multiply(BigDecimal.valueOf(membertierPrice));
					    					  memberdiscountAmount = memberdiscountAmount.divide(new BigDecimal(100));
					    					  memberdiscount = memberdiscountAmount.doubleValue();
					    					  
					    					  BigDecimal nonmemberdiscountAmount = pc.getDiscountpercentage().multiply(BigDecimal.valueOf(nonmembertierPrice));
					    					  nonmemberdiscountAmount = nonmemberdiscountAmount.divide(new BigDecimal(100));
					    					  nonmemberdiscount = nonmemberdiscountAmount.doubleValue();
					    				  }
					    			  }
					    		  }
					    		  
					    	  }
					    	  
					      }
					      //System.out.println(discount);
					      //System.out.println(lblPromoCode);
					      obj.put("memberdiscount", memberdiscount);
					      obj.put("nonmemberdiscount", nonmemberdiscount);
					      obj.put("discountcode", lblPromoCode);
					      
					      
//					      Double amt = p.getItemDetails().getPrice() - discount;
					      obj.put("finalamount", new Double(0));
					      json.add(obj);
		    		  }
		    	  }
		      }
		        
		  }
	      
	      //System.out.print(json);
	      return json.toString();
	}*/
	
	/*
	// Added getSignupByType in CommonController
	
	@RequestMapping(value="/getSignup", method=RequestMethod.GET)
    public @ResponseBody String getSignup(final HttpServletRequest request, final HttpServletResponse response) { 
		 	JSONArray json = new JSONArray();
		
		 	Authentication a = SecurityContextHolder.getContext().getAuthentication();
			String userId = null;
			try{
				userId = ((UserDetails) a.getPrincipal()).getUsername();
			}catch(Exception e){
				return json.toString();
			}
	    	
			Account account = null;
	    	if(userId != null && !"".equals(userId)){
		    	account = accountDao.getByEmail(userId);
	    	}
	    	
	    	if(account==null){
	    		return json.toString();
	    	}
	    	
	    	List<Signup> signups = signupDao.getByCustomer(account);
	    	
	    	for(Signup s: signups){
	    		if(s.getType().equalsIgnoreCase("MEMBERSHIP") && s.getItemDetailsSession()!=null){
			    	JSONObject obj = new JSONObject();
			    	obj.put("id", s.getSignupId());
					obj.put("signupId", s.getSignupId());
					obj.put("customerId", s.getCustomer().getAccountId());
					obj.put("itemId", s.getItemDetailsSession().getItemDetailsSessionId());
					obj.put("contactId", s.getContact().getPartyId());
					obj.put("locationId", s.getLocation().getLocationId());
					json.add(obj);
	    		}
	    	}
	    	
	    	//System.out.print(json);
	    	return json.toString();
	}
	
	// Moved to CommonController
	@RequestMapping(value="/getPromodetails", method=RequestMethod.GET)
    public @ResponseBody String getPromodetails(final HttpServletRequest request, final HttpServletResponse response) { 
		JSONArray json = new JSONArray();
		
		String promocode = request.getParameter("promocode");
		
		if(!"".equals(promocode)){
			Promocode promodetails = promocodeDao.getPromoDiscountByPromocode(promocode);
			if(promodetails!=null){
				  JSONObject obj = new JSONObject();
				
				  Double discount = new Double(0);
				  if(promodetails.getDiscounttype().equalsIgnoreCase(Constants.LABEL_ITEM_DISCOUNT_VALUE)){
					  discount = promodetails.getDiscountvalue();
				  }
				  
				  obj.put("valid", "true");
				  obj.put("promid", promodetails.getPromoId());
				  obj.put("promname", promodetails.getPromoName());
				  obj.put("discounttype", promodetails.getDiscounttype());
				  obj.put("discountValue", discount);
				  obj.put("discountPercentage", promodetails.getDiscountpercentage());
				  obj.put("promcode", promocode);
				  
				  JSONArray json1 = new JSONArray();
				  for(ItemPromoDetails ipd: promodetails.getItemPromoDetails()){
					  JSONObject obj1 = new JSONObject();
					  obj1.put("itemPromoDetailsId", ipd.getItemPromoDetailsId());
					  obj1.put("itemDetailsId", ipd.getItemDetails().getId());
					  json1.add(obj1);
	    		  }
				  
				  obj.put("itemDetails", json1.toString());
				  json.add(obj);
			}
		}
		
		return json.toString();
	}*/
	
	@RequestMapping(value="/viewAllPrograms", method=RequestMethod.GET)
    public ModelAndView viewAllPrograms(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
		
		String itemType = request.getParameter("itemType");
		String contactName = request.getParameter("contactName");
		String programStDt = request.getParameter("programStDt");
		String programEndDt = request.getParameter("programEndDt");
			
		// check if user is logged in
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			//model.addAttribute("errMsg", "Your session is expired");
			//return new ModelAndView("login", model.asMap());
			//System.out.println(e);
		}
		
		Account account = null;
		User user =  null;	

		if(userId != null && !"".equals(userId)){
	    	account = accountDao.getByEmail(userId);
			request.setAttribute("userId", userId);				
			user = getUserByAccount(account, user);
		}
		
		if(account != null){	    		    	    	
	        model.addAttribute("accInfo", account);
	        model.addAttribute("usInfo", user);	
	        
	        int userCount = account.getUser().size();
	        List<User> userS = new ArrayList<User>();
	        int countmembers = 0;
	        if(userCount>1){
		        for(User u: account.getUser()){
		        	if(!user.getUsername().equalsIgnoreCase(u.getUsername()) && u.isActive()){
		        		countmembers = countmembers + 1;
		        		userS.add(u);
		        	}
		        }
			}
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("userS", userS);
	        model.addAttribute("AlluserS", account.getUser());
     
	        model.addAttribute("userCount", countmembers);

	        JSONArray currentConfirmedProgramsArr = new JSONArray();
	        JSONArray upcomingConfirmedProgramsArr = new JSONArray();
	        JSONArray upcomingWaitlistedProgramsArr = new JSONArray();
	        JSONArray cancelledProgramsArr = new JSONArray();
	        JSONArray pastConfirmedProgramsArr = new JSONArray();
	        
	        //List<Object[]> lstCurrentConfirmedProgramsObj = productDao.getCurrentActiveSignupProgram(Constants.CONFIRMED);
	        List<Object[]> lstCurrentConfirmedProgramsObj = getSignupPrograms(Constants.CURRENT, Constants.ACTIVE, Constants.CONFIRMED, itemType, contactName, programStDt, programEndDt);
	        
	        for(Object currentConfirmedProgramsObj: lstCurrentConfirmedProgramsObj){
	        	
	        	Object currentConfirmedPrograms[] = (Object[]) currentConfirmedProgramsObj;
	        	
	        	Signup signup = (Signup) currentConfirmedPrograms[0];
	        	ItemDetails program = (ItemDetails) currentConfirmedPrograms[1];
	        	
	        	JSONObject jsonObj = new JSONObject();
	        	jsonObj.put("programId", program.getId());
	        	jsonObj.put("signupId", signup.getSignupId());
	        	jsonObj.put("itemType", program.getItemType());
	        	jsonObj.put("contactName", signup.getContactName());
				jsonObj.put("programName", program.getItemName());
				jsonObj.put("programStartDate", program.getStartdate());
				jsonObj.put("programEndDate", program.getEnddate());
				jsonObj.put("programStartTime", program.getStarttime());
				jsonObj.put("programEndTime", program.getEndtime());
				jsonObj.put("programStatus", program.getStatus());
				jsonObj.put("programEnrollmentStatus", signup.getStatus());
				
				currentConfirmedProgramsArr.add(jsonObj);
	        }
			model.addAttribute("currentConfirmedProgramsArr", currentConfirmedProgramsArr);
			
			//List<Object[]> lstupcomingConfirmedProgramsObj = productDao.getUpcomingActiveSignupProgram(Constants.CONFIRMED);
			List<Object[]> lstupcomingConfirmedProgramsObj = getSignupPrograms(Constants.UPCOMING, Constants.ACTIVE, Constants.CONFIRMED, itemType, contactName, programStDt, programEndDt);
	        for(Object upcomingConfirmedProgramsObj: lstupcomingConfirmedProgramsObj){
	        	
	        	Object upcomingConfirmedPrograms[] = (Object[]) upcomingConfirmedProgramsObj;
	        	
	        	Signup signup = (Signup) upcomingConfirmedPrograms[0];
	        	ItemDetails program = (ItemDetails) upcomingConfirmedPrograms[1];
	        	
	        	JSONObject jsonObj = new JSONObject();
	        	jsonObj.put("programId", program.getId());
	        	jsonObj.put("signupId", signup.getSignupId());
	        	jsonObj.put("itemType", program.getItemType());
	        	jsonObj.put("contactName", signup.getContactName());
				jsonObj.put("programName", program.getItemName());
				jsonObj.put("programStartDate", program.getStartdate());
				jsonObj.put("programEndDate", program.getEnddate());
				jsonObj.put("programStartTime", program.getStarttime());
				jsonObj.put("programEndTime", program.getEndtime());
				jsonObj.put("programStatus", program.getStatus());
				jsonObj.put("programEnrollmentStatus", signup.getStatus());
				
				upcomingConfirmedProgramsArr.add(jsonObj);
	        }
			model.addAttribute("upcomingConfirmedProgramsArr", upcomingConfirmedProgramsArr);
			
			//List<Object[]> lstupcomingWaitlistedProgramsObj = productDao.getUpcomingActiveSignupProgram(Constants.WAITLISTED);
			List<Object[]> lstupcomingWaitlistedProgramsObj = getSignupPrograms(Constants.UPCOMING, Constants.ACTIVE, Constants.WAITLISTED, itemType, contactName, programStDt, programEndDt);
	        for(Object upcomingWaitlistedProgramsObj: lstupcomingWaitlistedProgramsObj){
	        	
	        	Object upcomingWaitlistedPrograms[] = (Object[]) upcomingWaitlistedProgramsObj;
	        	
	        	Signup signup = (Signup) upcomingWaitlistedPrograms[0];
	        	ItemDetails program = (ItemDetails) upcomingWaitlistedPrograms[1];
	        	
	        	JSONObject jsonObj = new JSONObject();
	        	jsonObj.put("programId", program.getId());
	        	jsonObj.put("signupId", signup.getSignupId());
	        	jsonObj.put("itemType", program.getItemType());
	        	jsonObj.put("contactName", signup.getContactName());
				jsonObj.put("programName", program.getItemName());
				jsonObj.put("programStartDate", program.getStartdate());
				jsonObj.put("programEndDate", program.getEnddate());
				jsonObj.put("programStartTime", program.getStarttime());
				jsonObj.put("programEndTime", program.getEndtime());
				jsonObj.put("programStatus", program.getStatus());
				jsonObj.put("programEnrollmentStatus", signup.getStatus());
				
				upcomingWaitlistedProgramsArr.add(jsonObj);
	        }
			model.addAttribute("upcomingWaitlistedProgramsArr", upcomingWaitlistedProgramsArr);
			
			//List<Object[]> lstCancelledProgramsObj = productDao.getCancelledSignupProgram(Constants.CANCELLED);
			List<Object[]> lstCancelledProgramsObj = getSignupPrograms(Constants.CANCELLED, "", Constants.CANCELLED, itemType, contactName, programStDt, programEndDt);
	        for(Object cancelledProgramsObj: lstCancelledProgramsObj){
	        	
	        	Object cancelledPrograms[] = (Object[]) cancelledProgramsObj;
	        	
	        	Signup signup = (Signup) cancelledPrograms[0];
	        	ItemDetails program = (ItemDetails) cancelledPrograms[1];
	        	
	        	JSONObject jsonObj = new JSONObject();
	        	jsonObj.put("programId", program.getId());
	        	jsonObj.put("signupId", signup.getSignupId());
	        	jsonObj.put("itemType", program.getItemType());
	        	jsonObj.put("contactName", signup.getContactName());
				jsonObj.put("programName", program.getItemName());
				jsonObj.put("programStartDate", program.getStartdate());
				jsonObj.put("programEndDate", program.getEnddate());
				jsonObj.put("programStartTime", program.getStarttime());
				jsonObj.put("programEndTime", program.getEndtime());
				jsonObj.put("programStatus", program.getStatus());
				jsonObj.put("programEnrollmentStatus", signup.getStatus());
				
				cancelledProgramsArr.add(jsonObj);
	        }
			model.addAttribute("cancelledProgramsArr", cancelledProgramsArr);
			
			//List<Object[]> lstPastConfirmedProgramsObj = productDao.getPastActiveSignupProgram(Constants.CONFIRMED);
			List<Object[]> lstPastConfirmedProgramsObj = getSignupPrograms(Constants.PAST, Constants.ACTIVE, Constants.CONFIRMED, itemType, contactName, programStDt, programEndDt);
	        for(Object pastConfirmedProgramsObj: lstPastConfirmedProgramsObj){
	        	
	        	Object pastConfirmedPrograms[] = (Object[]) pastConfirmedProgramsObj;
	        	
	        	Signup signup = (Signup) pastConfirmedPrograms[0];
	        	ItemDetails program = (ItemDetails) pastConfirmedPrograms[1];
	        	
	        	JSONObject jsonObj = new JSONObject();
	        	jsonObj.put("programId", program.getId());
	        	jsonObj.put("signupId", signup.getSignupId());
	        	jsonObj.put("itemType", program.getItemType());
	        	jsonObj.put("contactName", signup.getContactName());
				jsonObj.put("programName", program.getItemName());
				jsonObj.put("programStartDate", program.getStartdate());
				jsonObj.put("programEndDate", program.getEnddate());
				jsonObj.put("programStartTime", program.getStarttime());
				jsonObj.put("programEndTime", program.getEndtime());
				jsonObj.put("programStatus", program.getStatus());
				jsonObj.put("programEnrollmentStatus", signup.getStatus());
				
				pastConfirmedProgramsArr.add(jsonObj);
	        }
			model.addAttribute("pastConfirmedProgramsArr", pastConfirmedProgramsArr);
		}
		
	    return new ModelAndView("viewAllPrograms", model.asMap());
	}
	
	@RequestMapping(value="/viewProgramDetails", method=RequestMethod.GET)
    public ModelAndView viewProgramDetails(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
		
		JSONArray enrolledProgramDetailsArr = new JSONArray(); 
		JSONArray paymentDetailsArr = new JSONArray(); 
		JSONArray interactionsBySignupArr = new JSONArray(); 
		
		String signupId = request.getParameter("sId");
		
		if(!"".equals(signupId)){
			
			// get signup details and item details associated with sign up
			Object programObj[] = (Object[]) signupDao.getSignupProgramById(Long.parseLong(signupId));
	    	Signup signup = (Signup) programObj[0];
	    	ItemDetails program = (ItemDetails) programObj[1];
	    	
	    	JSONObject jsonObj = new JSONObject();
	    	jsonObj.put("programId", program.getId());
	    	jsonObj.put("signupId", signup.getSignupId());
			jsonObj.put("programName", program.getItemName());
			jsonObj.put("programDescription", program.getDescription());
			jsonObj.put("programStartDate", program.getStartdate());
			jsonObj.put("programEndDate", program.getEnddate());
			jsonObj.put("programStartTime", program.getStarttime());
			jsonObj.put("programEndTime", program.getEndtime());
			jsonObj.put("programStatus", program.getStatus());
			jsonObj.put("programEnrollmentStatus", signup.getStatus());
			jsonObj.put("programEnrollmentDate", signup.getSignupDate());
			jsonObj.put("discountAmount", signup.getDiscountAmount());
			jsonObj.put("finalAmount", signup.getFinalAmount());
			
			enrolledProgramDetailsArr.add(jsonObj);			
			
			// get payment details associated with sign up
			List<Payment> lstPaymentDetails = paymentDao.findBySignupAndType(signup,Constants.DEBIT);
			if(lstPaymentDetails.size()>0){
				
				String ccNum = "";
				if(signup.getPaymentMethod()!=null && signup.getPaymentMethod().getPaymentId()!=null){
					List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentMethodByPaymentId(signup.getPaymentMethod().getPaymentId());
					if(lstPaymentMethod.size()>0){
						PaymentMethod paymentMethod = lstPaymentMethod.get(0);
						ccNum = paymentMethod.getCardNumber();
					}
				}
				for(Payment payment: lstPaymentDetails){
					JSONObject payObj = new JSONObject();
					payObj.put("transactionId", payment.getTransactionId());
					payObj.put("ccnumber", ccNum);
					payObj.put("amount", payment.getAmount());
					payObj.put("paymentDate", payment.getPaymentDate());
					
					paymentDetailsArr.add(payObj);
				}
				
			}
			
			// get interactions associated with sign up
			List<Interaction> lstInteractions = interactionDao.findBySignupAndType(signup, Constants.ATTENDANCE);
			for(Interaction interaction: lstInteractions){
				JSONObject intObj = new JSONObject();
		    	intObj.put("checkinDateTime", interaction.getCheckinDatetime());
		    	intObj.put("checkoutDateTime", interaction.getCheckoutDatetime());
				
				interactionsBySignupArr.add(intObj);
			}
			
		}
		
		model.addAttribute("enrolledProgramDetailsArr", enrolledProgramDetailsArr);
		model.addAttribute("paymentDetailsArr", paymentDetailsArr);
		model.addAttribute("interactionsBySignupArr", interactionsBySignupArr);
		
		return new ModelAndView("viewProgramDetails", model.asMap());
	}
	
	
	@RequestMapping(value="/cancelProgram", method=RequestMethod.GET)
    public ModelAndView cancelProgramWizard(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
		JSONArray enrolledProgramDetailsArr = new JSONArray(); 
		
		String signupId = request.getParameter("sId");
		
		if(!"".equals(signupId)){
			Object programObj[] = (Object[]) signupDao.getSignupProgramById(Long.parseLong(signupId));
			Signup signup = (Signup) programObj[0];
	    	ItemDetails program = (ItemDetails) programObj[1];
	    	
	    	
	    	Date programStartDate = program.getStartdate();
	    	java.util.Date currDate= new java.util.Date();
			
	    	System.out.println(programStartDate);
	    	System.out.println(programStartDate.getTime());
	    	System.out.println(currDate.getTime());
	    	
	    	long diff = programStartDate.getTime() - currDate.getTime();
	    	long diffDays = diff / (24 * 60 * 60 * 1000);
	    	
	    	System.out.println(diff);
	    	System.out.println(diffDays);
	    	int cancellationCutOffDays = program.getCancellationCutOffPeriod();
	    	
	    	if(diffDays >= cancellationCutOffDays){
	    		JSONObject jsonObj = new JSONObject();
	    		jsonObj.put("programId", program.getId());
		    	jsonObj.put("signupId", signup.getSignupId());
		    	jsonObj.put("contactName", signup.getContactName());
				jsonObj.put("programName", program.getItemName());
				jsonObj.put("programDescription", program.getDescription());
				jsonObj.put("programStartDate", program.getStartdate());
				jsonObj.put("programEndDate", program.getEnddate());
				jsonObj.put("programStartTime", program.getStarttime());
				jsonObj.put("programEndTime", program.getEndtime());
				jsonObj.put("programStatus", program.getStatus());
				jsonObj.put("programEnrollmentStatus", signup.getStatus());
				jsonObj.put("programEnrollmentDate", signup.getSignupDate());
				
				List<PricingRule> lstCancellationPR = pricingRuleDao.findBySignupAndType(signup, Constants.CANCEL);
				double cancellationPrice = 0D;
				if(lstCancellationPR.size()>0){
					for(PricingRule cancellationPR: lstCancellationPR){
						cancellationPrice += Double.parseDouble(cancellationPR.getTierPrice());
					}
				}
				jsonObj.put("cancellationPrice", cancellationPrice);
				
				double refundAmount = 0D;
				jsonObj.put("refundAmount", refundAmount);
				
				enrolledProgramDetailsArr.add(jsonObj);			
	    	}
	    	
		}
		model.addAttribute("enrolledProgramDetailsArr", enrolledProgramDetailsArr);
		
		TandC terms = tandCDao.findByType(Constants.CANCELLATION);
		if(terms!=null){
			model.addAttribute("terms", terms.getTandc());
		}
		
		return new ModelAndView("cancelProgram", model.asMap());
	}
	
	@RequestMapping(value="/cancelsignup", method=RequestMethod.GET)
    public @ResponseBody String  cancelSignup(@RequestParam String sId, final HttpServletRequest request, final HttpServletResponse response) { 	
		
		if(!"".equals(sId)){
			double refundAmount = 0D;
			
			try{
				Object programObj[] = (Object[]) signupDao.getSignupProgramById(Long.parseLong(sId));
				Signup signup = (Signup) programObj[0];
		    	ItemDetails program = (ItemDetails) programObj[1];
		    	
		    	signup.setStatus(Constants.CANCELLED);
		    	signupDao.save(signup);
		    	
		    	if(refundAmount > 0){
		    		
		    	}
			}
			catch(Exception e){
				return null;
			}
		}
		return Constants.SUCCESS;
	}
	
	private List<Object[]> getSignupPrograms(String strProgramTime, String programstatus, String signupstatus, String itemType, String contactName, String programStDt, String programEndDt) {
		Date today = new Date();
		DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
		DateFormat inputsdf = new SimpleDateFormat("M/d/yyyy");  
		
		CriteriaBuilder builder = em.getCriteriaBuilder();
		CriteriaQuery<Object[]> query = builder.createQuery(Object[].class);

		Root<Signup> s = query.from(Signup.class);
		Join<Signup, ItemDetails> i = s.join("itemDetails",JoinType.INNER);

		ParameterExpression<String> pTime = builder.parameter(String.class);
		ParameterExpression<String> pStatus = builder.parameter(String.class);
		ParameterExpression<String> sStatus = builder.parameter(String.class);
		ParameterExpression<String> iType = builder.parameter(String.class);
		ParameterExpression<String> cName = builder.parameter(String.class);
		ParameterExpression<Date> sd = builder.parameter(Date.class);
		ParameterExpression<Date> ed = builder.parameter(Date.class);
		ParameterExpression<Date> currentDate = builder.parameter(Date.class);
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		predicates.add(
				builder.and(
					builder.equal(s.get("status"), sStatus)
				)
		);
		
		
		if(!"".equals(programstatus.trim())){
			predicates.add(builder.and(builder.equal(i.<String>get("status"), pStatus)));
		}
		
		if(itemType!=null && !"".equals(itemType.trim())){
			predicates.add(builder.and(builder.equal(i.<String>get("itemType"), iType)));
		}
		
		if(contactName!=null && !"".equals(contactName.trim())){
			predicates.add(builder.and(builder.equal(s.<String>get("contactName"), cName)));
		}
		
		if(programStDt!=null && !"".equals(programStDt) && programEndDt!=null && !"".equals(programEndDt)){
			predicates.add(builder.and(builder.greaterThanOrEqualTo(i.<Date>get("startdate"), sd)));
			predicates.add(builder.and(builder.lessThanOrEqualTo(i.<Date>get("startdate"), ed)));
		}
		
		if(strProgramTime.equalsIgnoreCase(Constants.CURRENT)){
			predicates.add(builder.and(builder.lessThanOrEqualTo(i.<Date>get("startdate"), currentDate)));
			predicates.add(builder.and(builder.greaterThanOrEqualTo(i.<Date>get("enddate"), currentDate)));
		}
		else if(strProgramTime.equalsIgnoreCase(Constants.UPCOMING)){
			predicates.add(builder.and(builder.greaterThan(i.<Date>get("startdate"), currentDate)));
			predicates.add(builder.and(builder.greaterThan(i.<Date>get("enddate"), currentDate)));
		}
		else if(strProgramTime.equalsIgnoreCase(Constants.PAST)){
			predicates.add(builder.and(builder.lessThan(i.<Date>get("startdate"), currentDate)));
			predicates.add(builder.and(builder.lessThan(i.<Date>get("enddate"), currentDate)));
		}
		else if(strProgramTime.equalsIgnoreCase(Constants.SCHEDULED)){
			predicates.add(builder.and(builder.greaterThanOrEqualTo(i.<Date>get("enddate"), currentDate)));
		}
		
		query.multiselect(s,i);
		query.where(predicates.toArray(new Predicate[]{}));

		TypedQuery<Object[]> typequery = em.createQuery(query);
		typequery.setParameter(sStatus, signupstatus);
		
		if(!"".equals(programstatus.trim())){
			typequery.setParameter(pStatus, programstatus);
		}
		if(itemType!=null && !"".equals(itemType.trim())){
			typequery.setParameter(iType, itemType);
		}
		if(contactName!=null && !"".equals(contactName.trim())){
			typequery.setParameter(cName, contactName);
		}
		
		if(programStDt!=null && !"".equals(programStDt) && programEndDt!=null && !"".equals(programEndDt)){
			
			Date startDate;
	        Date endDate;

			try {
				startDate = sdf.parse(sdf.format(inputsdf.parse(programStDt)));
		        endDate = sdf.parse(sdf.format(inputsdf.parse(programEndDt)));
		        
		        typequery.setParameter(sd, startDate);
				typequery.setParameter(ed, endDate);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
				//return null;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				//e1.printStackTrace();
				//return null;
			}
		}
		
		
		try {
			typequery.setParameter(currentDate, sdf.parse(sdf.format(today)));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			//return null;
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			//e1.printStackTrace();
			//return null;
		}
		
		List<Object[]> lstObj = typequery.getResultList();
		return lstObj;
	}
	
	@RequestMapping(value="/viewScheduledProgram", method=RequestMethod.GET)
    public ModelAndView viewScheduledProgram(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
		
		String itemType = request.getParameter("itemType");
		String contactName = request.getParameter("contactName");
		String programStDt = request.getParameter("programStDt");
		String programEndDt = request.getParameter("programEndDt");
			
		// check if user is logged in
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			//model.addAttribute("errMsg", "Your session is expired");
			//return new ModelAndView("login", model.asMap());
			//System.out.println(e);
		}
		
		Account account = null;
		User user =  null;	

		if(userId != null && !"".equals(userId)){
	    	account = accountDao.getByEmail(userId);
			request.setAttribute("userId", userId);				
			user = getUserByAccount(account, user);
		}
		
		if(account != null){	    		    	    	
	        model.addAttribute("accInfo", account);
	        model.addAttribute("usInfo", user);	
	        
	        int userCount = account.getUser().size();
	        List<User> userS = new ArrayList<User>();
	        int countmembers = 0;
	        if(userCount>1){
		        for(User u: account.getUser()){
		        	if(!user.getUsername().equalsIgnoreCase(u.getUsername()) && u.isActive()){
		        		countmembers = countmembers + 1;
		        		userS.add(u);
		        	}
		        }
			}
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("userS", userS);
	        model.addAttribute("AlluserS", account.getUser());
     
	        model.addAttribute("userCount", countmembers);

	        JSONArray schdeuledProgramsArr = new JSONArray();
	        
	        List<Object[]> lstSchdeuledProgramsObj = getSignupPrograms(Constants.SCHEDULED, Constants.ACTIVE, Constants.CONFIRMED, itemType, contactName, programStDt, programEndDt);
	        
	        for(Object schdeuledProgramsObj: lstSchdeuledProgramsObj){
	        	
	        	Object schdeuledPrograms[] = (Object[]) schdeuledProgramsObj;
	        	
	        	Signup signup = (Signup) schdeuledPrograms[0];
	        	ItemDetails program = (ItemDetails) schdeuledPrograms[1];
	        	
	        	JSONObject jsonObj = new JSONObject();
	        	jsonObj.put("programId", program.getId());
	        	jsonObj.put("signupId", signup.getSignupId());
	        	jsonObj.put("itemType", program.getItemType());
	        	jsonObj.put("contactName", signup.getContactName());
				jsonObj.put("programName", program.getItemName());
				jsonObj.put("programStartDate", program.getStartdate());
				jsonObj.put("programEndDate", program.getEnddate());
				jsonObj.put("programStartTime", program.getStarttime());
				jsonObj.put("programEndTime", program.getEndtime());
				jsonObj.put("programStatus", program.getStatus());
				jsonObj.put("programEnrollmentStatus", signup.getStatus());
				
				schdeuledProgramsArr.add(jsonObj);
	        }
			model.addAttribute("schdeuledProgramsArr", schdeuledProgramsArr);
			
			
		}
		
	    return new ModelAndView("viewScheduledProgram", model.asMap());
	}
}
