package com.ymca.web.controller;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ymca.dao.AccountDao;
import com.ymca.dao.ActivityDao;
import com.ymca.dao.HealthHistoryDao;
import com.ymca.dao.ItemDetailDao;
import com.ymca.dao.ItemDetailDaysDao;
import com.ymca.dao.ItemDetailPricingRuleDao;
import com.ymca.dao.JetPayPaymentDao;
import com.ymca.dao.LocationDao;
import com.ymca.dao.PayerDao;
import com.ymca.dao.PaymentDao;
import com.ymca.dao.PaymentMethodDao;
import com.ymca.dao.PromotionDao;
import com.ymca.dao.SetpUpFeeDao;
import com.ymca.dao.SignupDao;
import com.ymca.dao.SystemPropertyDao;
import com.ymca.dao.TandCDao;
import com.ymca.dao.UserDao;
import com.ymca.dao.WaiversAndTCDao;
import com.ymca.model.Account;
import com.ymca.model.Activity;
import com.ymca.model.HealthHistory;
import com.ymca.model.ItemDetail;
import com.ymca.model.ItemDetailPricingRule;
import com.ymca.model.Payment;
import com.ymca.model.PaymentMethod;
import com.ymca.model.Signup;
import com.ymca.model.TandC;
import com.ymca.model.User;
import com.ymca.web.enums.InteractionActivityTypeEnum;
import com.ymca.web.enums.ProductTypeEnum;
import com.ymca.web.enums.SignupStatusEnum;
import com.ymca.web.service.FinancialAssistanceService;
import com.ymca.web.service.PaymentService;
import com.ymca.web.service.SignUpService;
import com.ymca.web.util.Constants;

@Controller
public class SignUpController extends BaseController {

	@PersistenceContext
	public EntityManager em; 
	
	@Resource
    private UserDetailsService userService;
	
	@Resource
	private AccountDao accountDao;
	
	@Resource
	private LocationDao locationDao;
	
	@Resource
	private SignupDao signupDao;
	
	@Resource
	private PaymentMethodDao paymentMethodDao;
	
	@Resource
	private PromotionDao promocodeDao;
	
	@Resource
	private UserDao userDao;
	
	@Resource
	private SystemPropertyDao systemPropertyDao;
	
	@Resource
	private ItemDetailPricingRuleDao itemDetailPricingRuleDao;
	
	@Resource
	private JetPayPaymentDao jetPayPaymentDao;
	
	@Resource
	private PaymentDao paymentDao;
	
	@Resource
	private ItemDetailDao itemDetailsDao;
	
	@Resource
	private ItemDetailDaysDao itemDaysDao;
	
	@Resource
	private ActivityDao interactionDao;
	
	@Resource
	private TandCDao tandCDao;
	
	@Autowired
    protected AuthenticationManager authenticationManager;
	
	@Resource
	private PaymentService paymentService;
	
	@Resource
	private FinancialAssistanceService financialAssistanceService;
	
	@Resource
	private SetpUpFeeDao setpUpFeeDao;
	
	@Resource
	private PayerDao payerDao;
	
	@Resource
	private HealthHistoryDao healthHistoryDao;
	
	@Resource
	private WaiversAndTCDao waiversAndTCDao;

	@Resource 
	private SignUpService signUpService ;  
	
	
	@RequestMapping(value="/signup/addTocart", method=RequestMethod.GET)
    public ModelAndView addTocart(Model model) { 
		
		model.addAttribute("productcategories", itemDetailsDao.getDistinctTypeForCategory(ProductTypeEnum.PROGRAM.toString()));
		//model.addAttribute("programlabels", programsLbl);
        model.addAttribute("locations", locationDao.findByStatusOrderByRecordNameAsc("Active"));
        
        // check if user is logged in
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			//model.addAttribute("errMsg", "Your session is expired");
			//return new ModelAndView("login", model.asMap());
			////System.out.println(e);
		}
		
		Account account = null;
    	User user =  null;	
    	List<PaymentMethod> paymentMethodList = null;
    	if(userId != null && !"".equals(userId)){
	    	account = accountDao.getByEmail(userId);
			request.setAttribute("userId", userId);				
			user = getUserByAccount(account, user);
			paymentMethodList = paymentMethodDao.getPaymentMethodListForAccountID(account.getAccountId());
    	}
    	
    	if(account != null){	    		    	    	
	        model.addAttribute("accInfo", account);
	        model.addAttribute("usInfo", user);	
	        
	        int userCount = account.getUser().size();
	        List<User> userS = new ArrayList<User>();
	        int countmembers = 0;
	        if(userCount>1){
		        for(User u: account.getUser()){
		        	if(user.getPartyId() != u.getPartyId() && u.isActive()){
		        		countmembers = countmembers + 1;
		        		userS.add(u);
		        	}
		        }
			}
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("userS", userS);
	        model.addAttribute("AlluserS", account.getUser());
	        
	        model.addAttribute("paymentInfoLst" , paymentMethodList);	     
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("gottocontact", "true");
	        
	        model.addAttribute("selectedLocation", user.getScLocation());
    	}
    	else {
			//model.addAttribute("errMsg", "Please Login");
			//return new ModelAndView("login", model.asMap());
    		return new ModelAndView("loginpop", model.asMap());
    		
		}	
		return new ModelAndView("programRegistration", model.asMap());
	}
	
	/*@RequestMapping(value="/signup/registor", method=RequestMethod.POST)
    public @ResponseBody String  signupProgram() { 	
		
		String tansId = "";
		String paymentId = request.getParameter("paymentId");
		String jp_request_hash = request.getParameter("jp_request_hash");
		String orderNumber = request.getParameter("orderNumber");
		String paymentMode = request.getParameter("paymentMode");
		
		String lstCartItem = request.getParameter("cartItems");
		List<String> lstStrCartItem = Arrays.asList(lstCartItem.split(","));
		
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			log.error(" failed userId :   "+userId);
			return "FAIL";
		}
    	
    	try{
    		Account customer = null;
        	if(userId != null && !"".equals(userId)){
        		customer = accountDao.getByEmail(userId);			
        	}
        	String portalLastModifiedBy = getPortalLastModifiedBy();
	    	if(lstStrCartItem.size()>0){
	    		for(String lstcartItems: lstStrCartItem){
	    			List<String> cartItems = Arrays.asList(lstcartItems.split("__"));
	    			
	    			if(cartItems!=null && cartItems.size()==18){
		    			//ItemDetailsSession ids = itemDetailsSessionDao.getByItemDetailsSessionId(Long.parseLong(cartItems.get(0)));
		    			String itemDetailId = cartItems.get(0);
		    			ItemDetail itemDetail = itemDetailsDao.findOne(Long.parseLong(itemDetailId));
		    			
		    			//ItemDays ids = itemDaysDao.getByItemDaysIdAndItemDetails(Long.parseLong(itemDaysMapId.get(0)), itemDetails);
		    			User u =  userDao.getOne(Long.parseLong(cartItems.get(1)));
		    			
						Signup signupprogram = paymentService.savesignup(paymentId, customer, cartItems, itemDetail, u, portalLastModifiedBy);
		    			Payer payer = paymentService.savepayer(paymentId, customer, cartItems, itemDetail, signupprogram, paymentMode);
		    			
		    			// capacity management block
		    			if(Boolean.valueOf(cartItems.get(14))) // call only if program is waitlisted
		    				signUpService.signupCapacityManagement(itemDetail, signupprogram, false);
		    			signUpService.saveActivity(customer, u, signupprogram);
		    			
		    			Date currDate = new Date();
		    			if(!Boolean.valueOf(cartItems.get(14)) && (payer.getEnddate()==null || "".equals(payer.getEnddate()) || currDate.getTime()<=payer.getEnddate().getTime())){
		    				
			    			Invoice invoice = paymentService.saveinvoice(customer, cartItems, u, signupprogram, payer);
			    			JetPayPayment jetpay = paymentService.savepayment(paymentId, jp_request_hash, orderNumber, customer, u, signupprogram, payer, invoice, paymentMode);
			    			
			    			Double setupAmount = Double.parseDouble(cartItems.get(7));
			    			//System.out.println("Set up amount: "+setupAmount);
			    			if(setupAmount.doubleValue()>0)
			    				signUpService.saveSetupFee(setupAmount, u);
			    			
			    			if(jetpay!=null)
			    				tansId = jetpay.getTransId();
		    			}
		    		}
	    		}
	    		
	    		if(!"".equals(orderNumber)){
	    			JetPayPayment jetPayPayment = jetPayPaymentDao.getByOrderNumber(orderNumber);
	    			if(jetPayPayment.getActCode() != null && Constants.PAYMENT_ACTION_CODE_SUCCESS.equals(jetPayPayment.getActCode())){
	    				tansId = jetPayPayment.getOrderNumber();
	    			}else{
	    				log.error("  failed orderNumber :   "+orderNumber);
	    				return "FAIL";
	    			}
	    		}
	    	}else{
	    		log.error("  failed lstStrCartItem.size :   "+lstStrCartItem.size());
	    		return "FAIL";
	    	}
    	}
    	catch(Exception e){
    		log.error("  failed exception  :   ");
    		log.error("Error  ",e);
    		e.printStackTrace();
    		////System.out.println(e);
    		return "FAIL";
    	}
		
		return "SUCCESS__"+tansId;
	}*/

	@RequestMapping(value="/signup/cancel", method=RequestMethod.POST)
    public @ResponseBody String  cancelSignup(@RequestParam String sId) { 	
		
		if(!"".equals(sId)){
			double reimbursedAmount = 0D;
			
			try{
				Object programObj[] = (Object[]) signupDao.getSignupProgramById(Long.parseLong(sId));
				Signup signup = (Signup) programObj[0];
		    	ItemDetail program = (ItemDetail) programObj[1];

		    	signup.setPortalLastModifiedBy(getPortalLastModifiedBy());
		    	signup.setStatus(SignupStatusEnum.Inactive.toString());
		    	signup.setCancelDate(new Date());
		    	Calendar cal = Calendar.getInstance();
		    	signup.setLastUpdated(cal);
		    	
		    	//signup.setPortalLastModifiedBy(getPortalLastModifiedBy());
		    	signupDao.save(signup);
		    	
		    	// capacity management block
		    	signUpService.cancelCapacityManagement(program,signup);
		    	
		    	signUpService.automaticWaitListProcessing(program);
		    	if(program.getCategory() != null && !program.getCategory().equals(ProductTypeEnum.EVENT.toString())){
					double cancellationPrice = 0D;
					List<ItemDetailPricingRule> lstCancellationPR = itemDetailPricingRuleDao.findByItemDetailIdAndStatusAndPricingRule_StatusAndPricingRule_Type(signup.getItemDetail().getId(), Constants.Status_Active, Constants.Status_Active,Constants.CANCEL);
					if(lstCancellationPR.size()>0){
						for(ItemDetailPricingRule cancellationPR: lstCancellationPR){
							cancellationPrice += cancellationPR.getPricingRule().getTierPrice();
						}
					}
					reimbursedAmount = signUpService.evaluateRefundExpressionAndReturnReimbursedAmount(signup, cancellationPrice);
					
			    	if(reimbursedAmount > 0){
			    		Double debitPayment = 0D;
			    		Double nsfOrCBorRefundPayment = 0D;
			    		boolean isRefund = false;
			    		List<String> cashOrChequePaymentIds = new ArrayList<String>();
			    		List<String> creditcardPaymentIds = new ArrayList<String>();
			    		List<String> achPaymentIds = new ArrayList<String>();
			    		
			    		List<Payment> lstAllPaymentsBySignup = paymentDao.findBySignupOrderByAmountDesc(signup);
			    		for(Payment payment: lstAllPaymentsBySignup){
			    			if(Constants.DEBIT.equalsIgnoreCase(payment.getType())){
			    				debitPayment += payment.getAmount();
			    				
			    				if(Constants.CASH.equalsIgnoreCase(payment.getPaymentMode()) || Constants.CHEQUE.equalsIgnoreCase(payment.getPaymentMode())){
				    				cashOrChequePaymentIds.add(payment.getPaymentId().toString());
				    			}
				    			else if(Constants.CREDITCARD.equalsIgnoreCase(payment.getPaymentMode())){
				    				creditcardPaymentIds.add(payment.getPaymentId().toString());
				    			}
				    			else if(Constants.ACH.equalsIgnoreCase(payment.getPaymentMode())){
				    				achPaymentIds.add(payment.getPaymentId().toString());
				    			}
			    			}
			    			else if(Constants.NSF.equalsIgnoreCase(payment.getType()) || Constants.CHARGEBACK.equalsIgnoreCase(payment.getType()) || Constants.CREDITMEMOREFUND.equalsIgnoreCase(payment.getType())){
			    				nsfOrCBorRefundPayment += payment.getAmount();
			    			}
			    		}
			    		
			    		if(debitPayment>0){
			    			if((debitPayment-nsfOrCBorRefundPayment)-reimbursedAmount >= 0){ // check if total paid payment is more than the refund amount
			    				if(cashOrChequePaymentIds.size()>0 && creditcardPaymentIds.size()==0 && achPaymentIds.size()==0){
			    					// all cash/ cheque payment
			    					isRefund = true;
			    					Long paymentId = Long.parseLong(cashOrChequePaymentIds.get(0));
			    					Payment p = paymentDao.findByPaymentId(paymentId);
	
			    					signUpService.savePayment(reimbursedAmount, p);
			    				}
			    				else if(cashOrChequePaymentIds.size()==0){
			    					// no cash/ cheque payment
			    					isRefund = true;
			    					Double balanceAmount = reimbursedAmount;
			    					Double refundAmount = 0D;
			    					
			    					for(Payment p: lstAllPaymentsBySignup){ 
			    						if(Constants.DEBIT.equalsIgnoreCase(p.getType())){ // list all payment with type = 'Debit'
				    						if(balanceAmount>0){
					    						if(p.getAmount()>=balanceAmount){
					    							refundAmount = balanceAmount;
					    							balanceAmount = 0D;
					    						}
					    						else{
					    							balanceAmount = reimbursedAmount - p.getAmount();
					    							refundAmount = p.getAmount();
					    						}
					    						
					    						signUpService.savePayment(refundAmount, p);
				    						}
			    						}
			    					}
			    				}
			    			}
			    			else{ // total paid payment is less than the refund amount, charge them cancellation charges
			    				if(cashOrChequePaymentIds.size()>0 && creditcardPaymentIds.size()==0 && achPaymentIds.size()==0){ // all cash/ cheque payment
			    					// create activity as the payment was done through cash/ cheque
			    					Activity activity = new Activity();
			    					activity.setSignup(signup);
			    					activity.setCustomer(signup.getCustomer());
			    					activity.setType(Constants.CANCELLATIONCHARGE);
			    					activity.setContact(signup.getContact());
			    					activity.setCreatedDate(new Date());
			    					activity.setDescription(program.getProgramDirector());
			    					activity.setLastUpdated(cal);
			    					//cancellationPrice
			    					interactionDao.save(activity);
			    				}
			    				else if(cashOrChequePaymentIds.size()==0){ // only CC or ACH payment
			    					// charge only cancellation charges as there is not much payment 
			    					Double balanceAmount = cancellationPrice;
			    					Double refundAmount = 0D;
			    					
			    					for(Payment p: lstAllPaymentsBySignup){ 
			    						if(Constants.DEBIT.equalsIgnoreCase(p.getType())){ // list all payment with type = 'Debit'
				    						if(balanceAmount>0){
					    						if(p.getAmount()>=balanceAmount){
					    							refundAmount = balanceAmount;
					    							balanceAmount = 0D;
					    						}
					    						else{
					    							balanceAmount = reimbursedAmount - p.getAmount();
					    							refundAmount = p.getAmount();
					    						}
					    						signUpService.savePayment(refundAmount, p);
				    						}
			    						}
			    					}
			    				}
			    			}
			    		}
			    	}
		    	}else if(program.getCategory() != null && program.getCategory().equals(ProductTypeEnum.EVENT.toString())){
		    		Activity activity = new Activity();
					activity.setSignup(signup);
					activity.setCustomer(signup.getCustomer());
					if(program.getStatus().equalsIgnoreCase("Active"))
						activity.setType(InteractionActivityTypeEnum.CancelEnrollment.toString());
					else
						activity.setType(InteractionActivityTypeEnum.EventCancelled.toString());
					activity.setContact(signup.getContact());
					activity.setCreatedDate(new Date());
					activity.setDescription(program.getProgramDirector());
					activity.setLastUpdated(cal);
					
					interactionDao.save(activity);
		    	}
			}
			catch(Exception e){
				return null;
			}
		}
		return Constants.SUCCESS;
	}

	
	@RequestMapping(value="/signup/cancel", method=RequestMethod.GET)
    public ModelAndView cancelWizard() {
		Model model = new ExtendedModelMap();
		try{
			JSONArray enrolledProgramDetailsArr = new JSONArray(); 
			
			String signupId = request.getParameter("sId");
			
			if(!"".equals(signupId)){
				Object programObj[] = (Object[]) signupDao.getSignupProgramById(Long.parseLong(signupId));
				Signup signup = (Signup) programObj[0];
		    	ItemDetail program = (ItemDetail) programObj[1];
		    	
		    	
		    	Date programStartDate = program.getStartDate();
		    	java.util.Date currDate= new java.util.Date();
		    	
		    	long diff = programStartDate.getTime() - currDate.getTime();
		    	long diffDays = diff / (24 * 60 * 60 * 1000);
		    	
		    	//System.out.println(diff);
		    	//System.out.println(diffDays);
		    	int cancellationCutOffDays = program.getCancellationCutOffPeriod();
		    	
		    	if(diffDays >= cancellationCutOffDays){
		    		JSONObject jsonObj = new JSONObject();
		    		jsonObj.put("programId", program.getId());
			    	jsonObj.put("signupId", signup.getSignupId());
			    	jsonObj.put("contactName", signup.getContactName());
					jsonObj.put("programName", program.getRecordName());
					jsonObj.put("programDescription", program.getDescription());
					jsonObj.put("programStartDate", program.getStartDate());
					jsonObj.put("programEndDate", program.getEndDate());
					jsonObj.put("programStartTime", program.getStartTime());
					jsonObj.put("programEndTime", program.getEndTime());
					jsonObj.put("programStatus", program.getStatus());
					if(program.getCategory() != null && program.getCategory().equalsIgnoreCase("EVENT")){
						jsonObj.put("noOfTickets", signup.getNoOfTickets());	
					}else{
						jsonObj.put("noOfTickets", "0");
					}
					jsonObj.put("programEnrollmentStatus", signup.getStatus());
					jsonObj.put("programEnrollmentDate", signup.getSignupDate());
					
					
					List<ItemDetailPricingRule> lstCancellationPR = itemDetailPricingRuleDao.findByItemDetailIdAndStatusAndPricingRule_StatusAndPricingRule_Type(signup.getItemDetail().getId(), Constants.Status_Active, Constants.Status_Active,Constants.CANCEL);
					double cancellationPrice = 0D;
					if(lstCancellationPR.size()>0){
						for(ItemDetailPricingRule cancellationPR: lstCancellationPR){
							cancellationPrice += cancellationPR.getPricingRule().getTierPrice();
						}
					}
					jsonObj.put("cancellationPrice", cancellationPrice);
					enrolledProgramDetailsArr.add(jsonObj);			
		    	}
			}
			model.addAttribute("enrolledProgramDetailsArr", enrolledProgramDetailsArr);
			
			TandC terms = tandCDao.findByType(Constants.CANCELLATION);
			if(terms!=null){
				model.addAttribute("terms", terms.getTandc());
			}
		}catch(Exception e){
			log.error("Error  ",e);
		}
		
		return new ModelAndView("cancelProgram", model.asMap());
	}
	
	@RequestMapping(value="/contact/healthHistory", method=RequestMethod.POST)
	public @ResponseBody String saveHealthHistory() {
		String resp = null;
		try{
			String[] contacts = request.getParameterValues("contactId");
			if(contacts != null && contacts.length > 0){
				HealthHistory healthHistory = null;
				Long contactId = 0l, healthHistoryId = 0l;
				for (String strContactId : contacts) {
					contactId = Long.parseLong(strContactId);
					healthHistoryId = Long.parseLong(request.getParameter("healthHistoryId_"+contactId));
					if(healthHistoryId > 0){
						healthHistory = healthHistoryDao.getOne(healthHistoryId);
					}else{
						healthHistory = new HealthHistory();
					}
					healthHistory.setInsuranceCompany_c(request.getParameter("InsuranceCompany_"+contactId));
					healthHistory.setInstructions_c(request.getParameter("Instructions_"+contactId));
					healthHistory.setListCurrentMedications_c(request.getParameter("listCurrentMedications_"+contactId));
					healthHistory.setCurrentMedicationPurpose_c(request.getParameter("currentMedicationPurpose_"+contactId));
					healthHistory.setLastUpdated(Calendar.getInstance());
					healthHistoryDao.save(healthHistory);
					if(healthHistoryId == 0){
						User contact = userDao.findOne(contactId);
						contact.setHealthHistory(healthHistory);
						contact.setLastUpdated(Calendar.getInstance());
						userDao.save(contact);
					}
				}
			}
			resp = "SUCCESS";
		}catch(Exception e){
			log.error("Error  ",e);
			resp = "FAIL";
		}
		return resp;
	}
	
	@RequestMapping(value="/signup/addTransportService", method=RequestMethod.GET)
	public String addTransportService(Long sId,RedirectAttributes model) throws Exception {
		String resp = "redirect:/camp";
		try{
			Signup signup  = signupDao.getOne(sId);
			model.addFlashAttribute("signUpItemId", signup.getItemDetailId());
			model.addFlashAttribute("signUpItemIdContactId", signup.getItemDetailId() + "_"  + signup.getContactId() + "_" + signup.getContactName());
			model.addFlashAttribute("loadActivityTransportWizrad", true);
		}catch(Exception e){
			log.error("Error  ",e);
		}
		return resp;
	}
}