package com.ymca.web.controller;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ymca.dao.AccountDao;
import com.ymca.dao.ItemDetailsSessionDao;
import com.ymca.dao.LocationDao;
import com.ymca.dao.PaymentMethodDao;
import com.ymca.dao.ProductDao;
import com.ymca.dao.PromocodeDao;
import com.ymca.dao.SignupDao;
import com.ymca.dao.UserDao;
import com.ymca.model.Account;
import com.ymca.model.ItemDetails;
import com.ymca.model.ItemDetailsSession;
import com.ymca.model.ItemPromoDetails;
import com.ymca.model.Locations;
import com.ymca.model.PaymentMethod;
import com.ymca.model.Product;
import com.ymca.model.Promocode;
import com.ymca.model.Signup;
import com.ymca.model.User;
import com.ymca.web.service.UserService;
import com.ymca.web.util.Constants;

@Controller
public class ProgramController extends BaseController {
	
	@Autowired
    private UserService userService;
	
	@Resource
	private AccountDao accountDao;
	
	@Resource
	private ProductDao productDao;
	
	@Resource
	private LocationDao locationDao;
	
	@Resource
	private SignupDao signupDao;
	
	@Resource
	private PaymentMethodDao paymentMethodDao;
	
	@Resource
	private ItemDetailsSessionDao itemDetailsSessionDao;
	
	@Resource
	private PromocodeDao promocodeDao;
	
	@Resource
	private UserDao userDao;
	
	@Autowired
    protected AuthenticationManager authenticationManager;
	
	@RequestMapping(value="/addprogramtocart", method=RequestMethod.GET)
    public ModelAndView addprogramtocart(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
		
		model.addAttribute("productcategories", productDao.getProductCategories());
        model.addAttribute("locations", locationDao.findAll());
        
        // check if user is logged in
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			//model.addAttribute("errMsg", "Your session is expired");
			//return new ModelAndView("login", model.asMap());
			System.out.println(e);
		}
		
		Account account = null;
    	User user =  null;	
    	List<PaymentMethod> paymentList = null;
    	if(userId != null && !"".equals(userId)){
	    	account = accountDao.getByEmail(userId);
			request.setAttribute("userId", userId);				
			user = getUserByAccount(account, user);
			paymentList = account.getPaymentMethod();
    	}
    	
    	if(account != null){	    		    	    	
	        model.addAttribute("accInfo", account);
	        model.addAttribute("usInfo", user);	
	        
	        int userCount = account.getUser().size();
	        List<User> userS = new ArrayList<User>();
	        int countmembers = 0;
	        if(userCount>1){
		        for(User u: account.getUser()){
		        	if(!user.getUsername().equalsIgnoreCase(u.getUsername()) && u.isActive()){
		        		countmembers = countmembers + 1;
		        		userS.add(u);
		        	}
		        }
			}
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("userS", userS);
	        model.addAttribute("AlluserS", account.getUser());
	        
	        model.addAttribute("paymentInfoLst" , paymentList);	     
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("gottocontact", "true");
    	}
    	else {
			//model.addAttribute("errMsg", "Please Login");
			//return new ModelAndView("login", model.asMap());
    		return new ModelAndView("loginpop", model.asMap());
    		
		}	
		return new ModelAndView("programRegistration", model.asMap());
	}
	
	@RequestMapping(value="/programRegistration", method=RequestMethod.GET)
    public ModelAndView programRegistration(final HttpServletRequest request, final HttpServletResponse response) { 
		Model model = new ExtendedModelMap();
		
		model.addAttribute("productcategories", productDao.getProductCategories());
        model.addAttribute("locations", locationDao.findAll());
        
        // check if user is logged in
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			//model.addAttribute("errMsg", "Your session is expired");
			//return new ModelAndView("login", model.asMap());
		}
		
		Account account = null;
    	User user =  null;	
    	List<PaymentMethod> paymentList = null;
    	if(userId != null && !"".equals(userId)){
	    	account = accountDao.getByEmail(userId);
			request.setAttribute("userId", userId);				
			user = getUserByAccount(account, user);
			paymentList = account.getPaymentMethod();
    	}
    	
    	if(account != null){	    		    	    	
	        model.addAttribute("accInfo", account);
	        model.addAttribute("usInfo", user);	
	        
	        int userCount = account.getUser().size();
	        List<User> userS = new ArrayList<User>();
	        int countmembers = 0;
	        if(userCount>1){
		        for(User u: account.getUser()){
		        	if(!user.getUsername().equalsIgnoreCase(u.getUsername()) && u.isActive()){
		        		countmembers = countmembers + 1;
		        		userS.add(u);
		        	}
		        }
			}
	        model.addAttribute("userCount", countmembers);
	        model.addAttribute("userS", userS);
	        model.addAttribute("AlluserS", account.getUser());
	        
	        model.addAttribute("paymentInfoLst" , paymentList);	     
	        model.addAttribute("gottocontact", "false");
	        
    	}/*
    	else {
			model.addAttribute("errMsg", "Please Login");
			return new ModelAndView("login", model.asMap());
			
		}	*/	
		return new ModelAndView("programRegistration", model.asMap());
    }
	
	@RequestMapping(value="/loginpop", method=RequestMethod.GET)
    public String loginPopup(final HttpServletRequest request, final HttpServletResponse response) { 
		return "loginpop";
	}
	
	@RequestMapping(value="/auth", method=RequestMethod.POST)
    public String auth(final HttpServletRequest request, final HttpServletResponse response) { 
		String username = request.getParameter("username");
		String password = request.getParameter("password");
		User user = null;

		if(username!=null && !"".equals(username.trim()) && password!=null && !"".equals(password)){
			Account account = accountDao.getByEmail(username);			
			user = getUserByAccount(account, user);
			if(user!=null && user.getPassword() !=null && password.equals(user.getPassword())){
				UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(username, user.getPassword());
				
				// generate session if one doesn't exist
		        request.getSession();
		        token.setDetails(new WebAuthenticationDetails(request));
		        //Authentication authenticatedUser = authenticationManager.authenticate(token);
		
		        SecurityContextHolder.getContext().setAuthentication(token);
		        
				return "redirect:/addprogramtocart";
			}
			
		}
		
		return "redirect:/login";
		
	}
	
	@RequestMapping(value="/getItemSessionDetails", method=RequestMethod.GET)
    public @ResponseBody List<ItemDetailsSession>  getItemSessionDetails(@RequestParam String location, @RequestParam String category, @RequestParam String productname, final HttpServletRequest request, final HttpServletResponse response) { 	
		
		List<ItemDetailsSession> nullitems = new ArrayList<ItemDetailsSession>();
		DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
		DateFormat inputsdf = new SimpleDateFormat("M/d/yyyy");  
		DateFormat inputmonthsdf = new SimpleDateFormat("MMM yyyy");  
		//String locationId = request.getParameter("location");
		//String category = request.getParameter("category");
		//String productname = request.getParameter("productname");
		String dayview = request.getParameter("dayview");
		String dateormonth = request.getParameter("dateormonth");
		
		Locations locations = new Locations();
		Long locId = Long.parseLong(location);
		locations.setLocationId(locId);
		
		Date startDate;
        Date endDate;
        
		if(dayview.equalsIgnoreCase("MONTH")){
			Calendar c = Calendar.getInstance();
			try {
				c.setTime(inputmonthsdf.parse(dateormonth));
				
			} catch (ParseException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return nullitems;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return nullitems;
			}
			
			   // this takes current date
			
		    c.set(Calendar.DAY_OF_MONTH, 1);
		    Date firstDateofMonth = c.getTime(); 
		    
		    //Date today = new Date();  
	        //Calendar calendar = Calendar.getInstance();  
	        //calendar.setTime(today);  
	
	        c.add(Calendar.MONTH, 1);  
	        //c.set(Calendar.DAY_OF_MONTH, 1);  
	        c.add(Calendar.DATE, -1);  
	        Date lastDateOfMonth = c.getTime(); 
        
			try {
				startDate = sdf.parse(sdf.format(firstDateofMonth));
				endDate = sdf.parse(sdf.format(lastDateOfMonth));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return nullitems;
			}
		}
		else{
			try {
				if("".equals(dateormonth.trim())){
					dateormonth = inputsdf.format(new Date());
				}
				startDate = sdf.parse(sdf.format(inputsdf.parse(dateormonth)));
				
				Calendar cal = Calendar.getInstance();
				cal.setTime(inputsdf.parse(dateormonth));
				cal.add(Calendar.MONTH, 1);  
		        cal.set(Calendar.DAY_OF_MONTH, 1);  
		        cal.add(Calendar.DATE, -1);  
		        Date lastDateOfMonth = cal.getTime(); 
		        
		        endDate = sdf.parse(sdf.format(lastDateOfMonth));
				//endDate = sdf.parse(sdf.format(inputsdf.parse(dateormonth)));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return nullitems;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return nullitems;
			}
			
		}
		
		try {
			List<ItemDetailsSession> itemDetailsSession = null;
			if("".equals(productname.trim())){
				itemDetailsSession = productDao.getMembershipProgramSession(startDate,endDate,category,locations);
			} else {
				itemDetailsSession = productDao.getMembershipProgramSession(startDate,endDate,category,productname,locations);
			}
			System.out.println(itemDetailsSession.size());
			if(itemDetailsSession.size()==0){
				return nullitems;
			}
			return itemDetailsSession;
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			//e1.printStackTrace();
			return nullitems;
		}
		
	}
	
	@RequestMapping(value="/getProgramDetails", method=RequestMethod.GET)
    public @ResponseBody List<ItemDetailsSession>  getProgramDetails(@RequestParam String location, @RequestParam String category, @RequestParam String productname, final HttpServletRequest request, final HttpServletResponse response) { 	
		
		List<ItemDetailsSession> nullitems = new ArrayList<ItemDetailsSession>();
		DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
		DateFormat inputsdf = new SimpleDateFormat("M/d/yyyy");  
		DateFormat inputmonthsdf = new SimpleDateFormat("MMM yyyy");  

		String datestart = request.getParameter("datestart");
		String dateend = request.getParameter("dateend");
		
		Locations locations = new Locations();
		Long locId = Long.parseLong(location);
		locations.setLocationId(locId);
		
		Date startDate;
        Date endDate;
        
		
		try {
			startDate = sdf.parse(sdf.format(inputsdf.parse(datestart)));
	        endDate = sdf.parse(sdf.format(inputsdf.parse(dateend)));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return nullitems;
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			return nullitems;
		}
		
		try {
			List<ItemDetailsSession> itemDetailsSession = new ArrayList<ItemDetailsSession>();
			if("".equals(productname.trim())){
				itemDetailsSession = productDao.getMembershipProgramSession(startDate,endDate,category,locations);
			} else {
				itemDetailsSession = productDao.getMembershipProgramSession(startDate,endDate,category,productname,locations);
			}
			System.out.println(itemDetailsSession.size());
			if(itemDetailsSession.size()==0){
				return nullitems;
			}
			return itemDetailsSession;
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			//e1.printStackTrace();
			return nullitems;
		}
		
	}
	
	@RequestMapping(value="/signupProgram", method=RequestMethod.POST)
    public @ResponseBody String  signupProgram(ItemDetailsSession itemDetailsSession, final HttpServletRequest request, final HttpServletResponse response) { 	
		//for(ItemDetailsSession ids: itemDetailsSession){
			//System.out.println(itemDetailsSession.getItemDetailsSessionId());
		//}
		String location = request.getParameter("location");
		String paymentId = request.getParameter("paymentId");
		
		String lstCartItem = request.getParameter("cartItems");
		List<String> lstStrCartItem = Arrays.asList(lstCartItem.split(","));
		
		Authentication a = SecurityContextHolder.getContext().getAuthentication();
		String userId = null;
		try{
			userId = ((UserDetails) a.getPrincipal()).getUsername();
		}catch(Exception e){
			return null;
		}
		
		Account customer = null;
    	if(userId != null && !"".equals(userId)){
    		customer = accountDao.getByEmail(userId);			
    	}
    	
    	if(lstStrCartItem.size()>0){
    		for(String lstcartItems: lstStrCartItem){

    			List<String> cartItems = Arrays.asList(lstcartItems.split("__"));

    			ItemDetailsSession ids =  itemDetailsSessionDao.getByItemDetailsSessionId(Long.parseLong(cartItems.get(0)));
    			User u =  userDao.getById(Long.parseLong(cartItems.get(1)));
    			
    			Signup signup = new Signup();
	    		signup.setCustomer(customer);
	    		signup.setItemDetailsSession(ids);
	    		signup.setItem(ids.getItem());
	    		signup.setProgramStartDate(ids.getItemDetails().getStartdate());
	    		signup.setProgramEndDate(ids.getItemDetails().getEnddate());
	    		signup.setFinalAmount(cartItems.get(2));
	    		signup.setLocation(location);
				signup.setContact(u);
				signup.setStatus(Constants.ACTIVE);
				signup.setType("MEMBERSHIP");
				
				if(Long.parseLong(paymentId)>0){
					List<PaymentMethod> lstPaymentMethod = paymentMethodDao.getPaymentMethodByPaymentId(Long.parseLong(paymentId));
					PaymentMethod paymentMethod = lstPaymentMethod.get(0);
					signup.setPaymentMethod(paymentMethod);
				}
				signupDao.save(signup);
    		}
    	}
		
		return null;
	}
	
	@RequestMapping(value="/getcartItems", method=RequestMethod.POST)
    public @ResponseBody List<ItemDetailsSession>  getcartItems(ItemDetailsSession itemDetailsSession, final HttpServletRequest request, final HttpServletResponse response) { 	
		
		String lstSessionId = request.getParameter("selectedItemSession");
		List<String> lstStrSessionId = Arrays.asList(lstSessionId.split(","));
		List<ItemDetailsSession> lstidsOut = new ArrayList<ItemDetailsSession>();
		
		for(String sId: lstStrSessionId){
			ItemDetails itemDetails = new ItemDetails();
			ItemDetailsSession idsOut = new ItemDetailsSession();
			ItemDetailsSession ids =  itemDetailsSessionDao.getByItemDetailsSessionId(Long.parseLong(sId));
			
			Authentication a = SecurityContextHolder.getContext().getAuthentication();
			String userId = null;
			try{
				userId = ((UserDetails) a.getPrincipal()).getUsername();
			}catch(Exception e){
				return null;
			}
			
			Account customer = null;
	    	if(userId != null && !"".equals(userId)){
	    		customer = accountDao.getByEmail(userId);			
	    	}
	    	
	    	
	    	if(customer!=null){
	    		idsOut.setSessionName(ids.getSessionName());
	    		idsOut.setDays(ids.getDays());
	    		idsOut.setStarttime(ids.getStarttime());
	    		idsOut.setEndtime(ids.getEndtime());
	    		
	    		itemDetails.setStartdate(ids.getItemDetails().getStartdate());
	    		itemDetails.setEnddate(ids.getItemDetails().getEnddate());
	    		itemDetails.setPrice(ids.getItemDetails().getPrice());
	    		idsOut.setItemDetails(itemDetails);
	    		
	    		lstidsOut.add(idsOut);
	    		System.out.println(idsOut);
	    	}
		}
		
		return lstidsOut;
	}
	
	@RequestMapping(value="/getProductsbyCategory", method=RequestMethod.GET)
    public @ResponseBody List<Product>  getProductsbyCategory(final HttpServletRequest request, final HttpServletResponse response) { 		
    	try{
    		String strCategory = request.getParameter("category");
    		List<Product> productLst =  productDao.getProductsbyCategories(strCategory);
    		return productLst; 
    		
    	}catch(Exception e){    		
    		      		
    	}
		return null;    	
    }
	
	@RequestMapping(value="/ProgramDetail", method=RequestMethod.GET)
    public String ProgramDetail(final HttpServletRequest request, final HttpServletResponse response) { 
		return "ProgramDetail";
	}
	
	@RequestMapping(value="/getItems", method=RequestMethod.GET)
    public @ResponseBody String getItemS(final HttpServletRequest request, final HttpServletResponse response) { 	
		  DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
		  Date todayDate;
		  String today;
		 // Date today = new Date();  
	      Calendar calendar = Calendar.getInstance();  
	      //calendar.setTime(today);  
	      
		  List<Promocode> promo = new ArrayList<Promocode>();
		  List<Product> productLst =  productDao.findAll();
		  
		  try {
			  System.out.println(calendar.getTime());
			  todayDate = sdf.parse(sdf.format(calendar.getTime()));
			  today = sdf.format(calendar.getTime());
			  System.out.println(todayDate);
			  System.out.println(today);
			  promo = promocodeDao.getACPromoDiscountByItemDetailsId();
			  System.out.println(promo.size());
		  } catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
		  }
		  
		  
		  JSONArray json = new JSONArray();
		  
		  for(Product p: productLst){
		      if(p.getItemDetails()!=null){
		    	  List<ItemDetailsSession> itemSession = p.getItemDetails().getItemDetailsSession();
		    	  if(itemSession.size()>0){
		    		  for(ItemDetailsSession ids : itemSession){
				    	  JSONObject obj = new JSONObject();
				    	  obj.put("id", ids.getItemDetailsSessionId());
						  obj.put("prodId", ids.getItemDetailsSessionId());
					      obj.put("name", p.getProductName());
				    	  obj.put("price", p.getItemDetails().getPrice());
				    	  obj.put("description", p.getDescription());
					      obj.put("category", p.getCategory());
					      obj.put("sessionName", ids.getSessionName());
					      obj.put("instructor", ids.getInstructorName());
					      obj.put("start_time", ids.getStarttime());
					      obj.put("end_time", ids.getEndtime());
					      obj.put("start_date", ids.getItemDetails().getStartdate());
					      obj.put("end_date", ids.getItemDetails().getEnddate());
					      obj.put("itemDetailsId", ids.getItemDetails().getId());
					      obj.put("itemDetailsSessionId", ids.getItemDetailsSessionId());
					      obj.put("days", ids.getDays());
					      
					      Double discount = new Double(0);
					      String lblPromoCode = "";
					      if(promo.size()>0){
					    	  for(Promocode pc: promo){
					    		  for(ItemPromoDetails ipd: pc.getItemPromoDetails()){
					    			  if(ipd.getItemDetails().getId().equals(ids.getItemDetails().getId())){
					    				  lblPromoCode = pc.getPromoCode();
					    				  if(pc.getDiscounttype().equalsIgnoreCase(Constants.LABEL_ITEM_DISCOUNT_VALUE)){
					    					  discount = pc.getDiscountvalue();
					    				  }
					    				  else if(pc.getDiscounttype().equalsIgnoreCase(Constants.LABEL_ITEM_DISCOUNT_PERCENTAGE)){
					    					  BigDecimal discountAmount = pc.getDiscountpercentage().multiply(BigDecimal.valueOf(p.getItemDetails().getPrice()));
					    					  discountAmount = discountAmount.divide(new BigDecimal(100));
					    					  discount = discountAmount.doubleValue();
					    				  }
					    			  }
					    		  }
					    		  
					    	  }
					    	  
					      }
					      //System.out.println(discount);
					      //System.out.println(lblPromoCode);
					      obj.put("discount", discount);
					      obj.put("discountcode", lblPromoCode);
					      
					      Double amt = p.getItemDetails().getPrice() - discount;
					      obj.put("finalamount", amt);
					      json.add(obj);
		    		  }
		    	  }
		      }
		        
		  }
	      
	      //System.out.print(json);
	      return json.toString();
	}
	
	@RequestMapping(value="/getContacts", method=RequestMethod.GET)
    public @ResponseBody String getContactS(final HttpServletRequest request, final HttpServletResponse response) { 
		 	JSONArray json = new JSONArray();
		
		 	Authentication a = SecurityContextHolder.getContext().getAuthentication();
			String userId = null;
			try{
				userId = ((UserDetails) a.getPrincipal()).getUsername();
			}catch(Exception e){
				return json.toString();
			}
			
			Account account = null;
	    	if(userId != null && !"".equals(userId)){
		    	account = accountDao.getByEmail(userId);
	    	}
	    	
	    	if(account==null){
	    		return json.toString();
	    	}
	    	
	    	for(User u: account.getUser()){
		    	JSONObject obj = new JSONObject();
		    	obj.put("id", u.getId());
				obj.put("contactId", u.getId());
				obj.put("fname", u.getFirstName());
				obj.put("lname", u.getLastName());
				json.add(obj);
	    	}
	    	
	    	//System.out.print(json);
	    	return json.toString();
	}
	
	@RequestMapping(value="/getSignup", method=RequestMethod.GET)
    public @ResponseBody String getSignup(final HttpServletRequest request, final HttpServletResponse response) { 
		 	JSONArray json = new JSONArray();
		
		 	Authentication a = SecurityContextHolder.getContext().getAuthentication();
			String userId = null;
			try{
				userId = ((UserDetails) a.getPrincipal()).getUsername();
			}catch(Exception e){
				return json.toString();
			}
	    	
			Account account = null;
	    	if(userId != null && !"".equals(userId)){
		    	account = accountDao.getByEmail(userId);
	    	}
	    	
	    	if(account==null){
	    		return json.toString();
	    	}
	    	
	    	List<Signup> signups = signupDao.getByCustomer(account);
	    	
	    	for(Signup s: signups){
		    	JSONObject obj = new JSONObject();
		    	obj.put("id", s.getSignupId());
				obj.put("signupId", s.getSignupId());
				obj.put("customerId", s.getCustomer().getAccountId());
				obj.put("itemId", s.getItemDetailsSession().getItemDetailsSessionId());
				obj.put("contactId", s.getContact().getId());
				obj.put("locationId", s.getLocation());
				json.add(obj);
	    	}
	    	
	    	//System.out.print(json);
	    	return json.toString();
	}
	
	@RequestMapping(value="/getPromodetails", method=RequestMethod.GET)
    public @ResponseBody String getPromodetails(final HttpServletRequest request, final HttpServletResponse response) { 
		JSONArray json = new JSONArray();
		
		String promocode = request.getParameter("promocode");
		
		if(!"".equals(promocode)){
			Promocode promodetails = promocodeDao.getPromoDiscountByPromocode(promocode);
			if(promodetails!=null){
				  JSONObject obj = new JSONObject();
				
				  Double discount = new Double(0);
				  if(promodetails.getDiscounttype().equalsIgnoreCase(Constants.LABEL_ITEM_DISCOUNT_VALUE)){
					  discount = promodetails.getDiscountvalue();
				  }
				  
				  obj.put("valid", "true");
				  obj.put("promid", promodetails.getPromoId());
				  obj.put("promname", promodetails.getPromoName());
				  obj.put("discounttype", promodetails.getDiscounttype());
				  obj.put("discountValue", discount);
				  obj.put("discountPercentage", promodetails.getDiscountpercentage());
				  obj.put("promcode", promocode);
				  
				  JSONArray json1 = new JSONArray();
				  for(ItemPromoDetails ipd: promodetails.getItemPromoDetails()){
					  JSONObject obj1 = new JSONObject();
					  obj1.put("itemPromoDetailsId", ipd.getItemPromoDetailsId());
					  obj1.put("itemDetailsId", ipd.getItemDetails().getId());
					  json1.add(obj1);
	    		  }
				  
				  obj.put("itemDetails", json1.toString());
				  json.add(obj);
			}
		}
		
		return json.toString();
	}
}
