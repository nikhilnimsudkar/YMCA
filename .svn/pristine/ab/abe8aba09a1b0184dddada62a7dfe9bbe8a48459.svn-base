// models / data
 
var items = new kendo.data.DataSource({
    schema: 
    { 
        model: {} 
    },
    transport: 
    { 
		/*
        read: 
        { 
            url:  "http://localhost:8080/ymca-web/resources/data/menu.json", 
            dataType: "json" 
        } */
		
		read:  {
		  url: "http://166.78.104.119:8080/ymca-web/getItems",
		  dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
		}
		
    }
});

var contacts = new kendo.data.DataSource({
    schema: 
    { 
        model: {} 
    },
    transport: 
    { 
		read:  {
		  url: "http://166.78.104.119:8080/ymca-web/getContacts",
		  dataType: "json" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
		}
		
    }
});

var alldata = [];
if($.sessionStorage.getItem('cart')!=null){
	alldata = JSON.parse($.sessionStorage.getItem('cart'));
	//console.log(alldata);
}

var cart = kendo.observable({
    contents: alldata,
    cleared: false,

    contentsCount: function() {
        return this.get("contents").length;
    },

    add: function(item,contact) {
        var found = false;
        this.set("cleared", false);

        for (var i = 0; i < this.contents.length; i ++) {
            var current = this.contents[i];
			//console.log(current.item);
			//console.log(item);
            if (current.item === item) {
                //current.set("quantity", current.get("quantity") + 1);
               // found = true;
                break;
            }
        }

        if (!found) {
            this.contents.push({ item: item, contact:contact , quantity: 1 });
        }
		console.log(JSON.stringify(this.contents));
		$.sessionStorage.setItem('cart', JSON.stringify(this.contents));
		//console.log($.sessionStorage.getItem('key_name'));
		//console.log(item);
    },

    remove: function(item) {
        for (var i = 0; i < this.contents.length; i ++) {
            var current = this.contents[i];
            if (current === item) {
                this.contents.splice(i, 1);
				$.sessionStorage.setItem('cart', JSON.stringify(this.contents));
                break;
            }
        }
    },

    empty: function() {
        var contents = this.get("contents");
        contents.splice(0, contents.length);
		$.sessionStorage.clear();
    },

    clear: function() {
        var contents = this.get("contents");
        contents.splice(0, contents.length);
        this.set("cleared", true);
		$.sessionStorage.clear();
    },

    total: function() {
        var price = 0,
            contents = this.get("contents"),
            length = contents.length,
            i = 0;

        for (; i < length; i ++) {
            price += parseInt(contents[i].item.price) * contents[i].quantity;
        }

        return kendo.format("{0:c}", price);
    }
	
});

var layoutModel = kendo.observable({
    cart: cart
});

var cartPreviewModel = kendo.observable({
    cart: cart,

    cartContentsClass: function() {
        return this.cart.contentsCount() > 0 ? "active" : "empty";
    },

    removeFromCart: function(e) {
        this.get("cart").remove(e.data);
    },

    emptyCart: function() {
        cart.empty();
    },

    itemPrice: function(cartItem) {
        return kendo.format("{0:c}", cartItem.item.price);
    },

    totalPrice: function() {
        return this.get("cart").total();
    },

    proceed: function(e) {
        this.get("cart").clear();
        sushi.navigate("/");
    }
});

var indexModel = kendo.observable({
    items: items,
    cart: cart,

    addToCart: function(e) {
		//console.log(e.data);
        cart.add(e.data);
    }
});

var detailModel = kendo.observable({
    imgUrl: function() {
        return "/images/200/" + this.get("current").image
    },

    price: function() {
        return kendo.format("{0:c}", this.get("current").price);
    },

    addToCart: function(e) {
        cart.add(this.get("current"));
    },

    setCurrent: function(itemID) {
        this.set("current", items.get(itemID));
    },

    previousHref: function() {
        var id = this.get("current").id - 1;
        if (id === 0) {
           id = items.data().length - 1;
        }

        return "#/menu/" + id;
    },

    nextHref: function() {
        var id = this.get("current").id + 1;

        if (id === items.data().length) {
           id = 1;
        }

        return "#/menu/" + id;
    },

    kCal: function() {
        return kendo.toString(this.get("current").stats.energy /  4.184, "0.0000");
    }
});

// added by Lavy
var productModel = kendo.observable({
	setCurrent: function(itemID) {
		console.log(items.get(itemID));
        this.set("current", items.get(itemID));
    },	
	addToCart: function(e) {
		console.log("Add to cart");
		console.log(this.get("current"));
        cart.add(this.get("current"));
		location.href = '#/checkout';
    },
	removeFromCart: function(e) {
		console.log(this.get("current"));
		alert();
        this.get("cart").remove(this.get("current"));
    }
});

// Views and layouts
var layout = new kendo.Layout("layout-template", { model: layoutModel });
var cartPreview = new kendo.Layout("cart-preview-template", { model: cartPreviewModel });
var index = new kendo.View("index-template", { model: indexModel });
var checkout = new kendo.View("checkout-template", {model: cartPreviewModel });
var detail = new kendo.View("detail-template", { model: detailModel });
//added by Lavy
var productindex = new kendo.View("product-template", { model: productModel });

var sushi = new kendo.Router({
    init: function() {
         console.log("router init");
        layout.render("#application");
    }
});

var viewingDetail = false;

// Routing
sushi.route("/", function() {
    console.log("router root route")
    viewingDetail = false;
    layout.showIn("#content", index);
    layout.showIn("#pre-content", cartPreview);
});

sushi.route("/product/:id/:cid", function(itemsID, ContactsId) {
	console.log(itemsID);
	console.log(ContactsId);
	viewingDetail = false;
	
	var itemId = itemsID.split(",");
	var contactId = ContactsId.split(",");
	//alert(contactId);
	$.each(contactId,function(j){
		contacts.fetch(function(e1) {
		var cid =  contacts.get(contactId[j]);	
		console.log(cid);
		   $.each(itemId,function(i){
			   items.fetch(function(e) {
					var iid = items.get(itemId[i])
					console.log(iid);
					//this.set("current", items.get(array[i]));
					cart.add(iid,cid);
				});
			});
		 });
	});
	
	location.href = '#/checkout';
});

sushi.route("/checkout", function() {
    viewingDetail = false;
    layout.showIn("#content", checkout);
    cartPreview.hide();
});

sushi.route("/menu/:id", function(itemID) {
	//alert(itemID);					  
    layout.showIn("#pre-content", cartPreview);
    var transition = "",
        current = detailModel.get("current");
	
	//console.log("lavy");
	console.log(detailModel);
    if (viewingDetail && current) {
        transition = current.id < itemID ? "tileleft" : "tileright";
    }

    items.fetch(function(e) {
        if (detailModel.get("current")) { // existing view, start transition, then update content. This is necessary for the correct view transition clone to be created.
            console.log("lavy1");
			layout.showIn("#content", detail, transition);
            detailModel.setCurrent(itemID);
        } else {
            // update content first
			console.log("lavy2");
            detailModel.setCurrent(itemID);
            layout.showIn("#content", detail, transition);
        }
    });

    viewingDetail = true;
});

$(function() {
    sushi.start();
	
});
